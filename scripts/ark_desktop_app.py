#!/usr/bin/env python3
"""
ARK v2.8 - –ù–∞—Ç–∏–≤–Ω–æ–µ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
–ü—Ä—è–º–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–≥–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ GUI
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
import time
import json
import sys
from pathlib import Path
import subprocess
import psutil
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from mind.cognitive_architecture import cognitive_brain
from mind.advanced_consciousness import AdvancedConsciousnessModel
from evaluation.auto_reporter import auto_reporter

class ARKDesktopApp:
    def __init__(self, root):
        self.root = root
        self.root.title("ARK v2.8 - –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π –ò–ò-–∞–≥–µ–Ω—Ç")
        self.root.geometry("1200x800")
        self.root.configure(bg='#2b2b2b')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.cognitive_brain = cognitive_brain
        self.consciousness = AdvancedConsciousnessModel()
        self.auto_reporter = auto_reporter
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        self.agent_active = False
        self.agent_thread = None
        
        self.setup_ui()
        self.start_agent()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        self.setup_status_panel(main_frame)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        notebook = ttk.Notebook(main_frame)
        notebook.pack(fill=tk.BOTH, expand=True, pady=(10, 0))
        
        # –í–∫–ª–∞–¥–∫–∞ —á–∞—Ç–∞
        self.setup_chat_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.setup_monitoring_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        self.setup_system_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏
        self.setup_evolution_tab(notebook)
    
    def setup_status_panel(self, parent):
        """–ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
        status_frame = ttk.LabelFrame(parent, text="–°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞", padding=10)
        status_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
        self.status_label = ttk.Label(status_frame, text="üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...", font=('Arial', 12, 'bold'))
        self.status_label.pack(side=tk.LEFT, padx=(0, 20))
        
        # –°–æ–∑–Ω–∞–Ω–∏–µ
        self.consciousness_label = ttk.Label(status_frame, text="üß† –°–æ–∑–Ω–∞–Ω–∏–µ: –∑–∞–≥—Ä—É–∑–∫–∞...", font=('Arial', 10))
        self.consciousness_label.pack(side=tk.LEFT, padx=(0, 20))
        
        # –≠–º–æ—Ü–∏–∏
        self.emotion_label = ttk.Label(status_frame, text="üòä –≠–º–æ—Ü–∏—è: –∑–∞–≥—Ä—É–∑–∫–∞...", font=('Arial', 10))
        self.emotion_label.pack(side=tk.LEFT, padx=(0, 20))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(status_frame)
        control_frame.pack(side=tk.RIGHT)
        
        self.start_btn = ttk.Button(control_frame, text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", command=self.start_agent)
        self.start_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        self.stop_btn = ttk.Button(control_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.stop_agent)
        self.stop_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        self.restart_btn = ttk.Button(control_frame, text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", command=self.restart_agent)
        self.restart_btn.pack(side=tk.LEFT)
    
    def setup_chat_tab(self, notebook):
        """–í–∫–ª–∞–¥–∫–∞ —á–∞—Ç–∞ —Å –∞–≥–µ–Ω—Ç–æ–º"""
        chat_frame = ttk.Frame(notebook)
        notebook.add(chat_frame, text="üí¨ –ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–æ–º")
        
        # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        chat_area = ttk.Frame(chat_frame)
        chat_area.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.chat_display = scrolledtext.ScrolledText(
            chat_area, 
            height=20, 
            font=('Consolas', 10),
            bg='#1e1e1e',
            fg='#ffffff',
            insertbackground='white'
        )
        self.chat_display.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # –û–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞
        input_frame = ttk.Frame(chat_area)
        input_frame.pack(fill=tk.X)
        
        self.message_entry = ttk.Entry(input_frame, font=('Arial', 11))
        self.message_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))
        self.message_entry.bind('<Return>', self.send_message)
        
        send_btn = ttk.Button(input_frame, text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", command=self.send_message)
        send_btn.pack(side=tk.RIGHT)
        
        # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
        commands_frame = ttk.LabelFrame(chat_frame, text="–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã", padding=10)
        commands_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        commands = [
            ("üß† –°—Ç–∞—Ç—É—Å –º–æ–∑–≥–∞", "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"),
            ("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "–ü–æ–∫–∞–∂–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"),
            ("üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "–ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã?"),
            ("üéØ –ó–∞–¥–∞—á–∏", "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è?"),
            ("üìà –≠–≤–æ–ª—é—Ü–∏—è", "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å —ç–≤–æ–ª—é—Ü–∏–∏"),
            ("üîç –ê–Ω–∞–ª–∏–∑", "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã")
        ]
        
        for i, (label, command) in enumerate(commands):
            btn = ttk.Button(commands_frame, text=label, 
                           command=lambda cmd=command: self.quick_command(cmd))
            btn.grid(row=i//3, column=i%3, padx=5, pady=2, sticky='ew')
    
    def setup_monitoring_tab(self, notebook):
        """–í–∫–ª–∞–¥–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
        monitor_frame = ttk.Frame(notebook)
        notebook.add(monitor_frame, text="üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        system_frame = ttk.LabelFrame(monitor_frame, text="–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding=10)
        system_frame.pack(fill=tk.X, padx=10, pady=10)
        
        self.cpu_label = ttk.Label(system_frame, text="CPU: –∑–∞–≥—Ä—É–∑–∫–∞...")
        self.cpu_label.pack(anchor=tk.W)
        
        self.memory_label = ttk.Label(system_frame, text="RAM: –∑–∞–≥—Ä—É–∑–∫–∞...")
        self.memory_label.pack(anchor=tk.W)
        
        self.disk_label = ttk.Label(system_frame, text="–î–∏—Å–∫: –∑–∞–≥—Ä—É–∑–∫–∞...")
        self.disk_label.pack(anchor=tk.W)
        
        # –õ–æ–≥–∏ –∞–≥–µ–Ω—Ç–∞
        logs_frame = ttk.LabelFrame(monitor_frame, text="–õ–æ–≥–∏ –∞–≥–µ–Ω—Ç–∞", padding=10)
        logs_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        self.logs_display = scrolledtext.ScrolledText(
            logs_frame, 
            height=15, 
            font=('Consolas', 9),
            bg='#1e1e1e',
            fg='#00ff00'
        )
        self.logs_display.pack(fill=tk.BOTH, expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤
        refresh_btn = ttk.Button(logs_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏", command=self.refresh_logs)
        refresh_btn.pack(pady=(5, 0))
    
    def setup_system_tab(self, notebook):
        """–í–∫–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        system_frame = ttk.Frame(notebook)
        notebook.add(system_frame, text="üîß –°–∏—Å—Ç–µ–º–∞")
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tools_frame = ttk.LabelFrame(system_frame, text="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–≥–µ–Ω—Ç–∞", padding=10)
        tools_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        tools = [
            ("üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "analyze_performance"),
            ("üîç –ü–æ–∏—Å–∫ —É–∑–∫–∏—Ö –º–µ—Å—Ç", "identify_bottlenecks"),
            ("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "check_security"),
            ("üìù –û–±–∑–æ—Ä –∫–æ–¥–∞", "review_code_changes"),
            ("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞", "validate_syntax"),
            ("üöÄ –ü–ª–∞–Ω —ç–≤–æ–ª—é—Ü–∏–∏", "plan_evolution")
        ]
        
        for i, (label, tool) in enumerate(tools):
            btn = ttk.Button(tools_frame, text=label, 
                           command=lambda t=tool: self.run_tool(t))
            btn.grid(row=i//2, column=i%2, padx=5, pady=5, sticky='ew')
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        actions_frame = ttk.LabelFrame(system_frame, text="–°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", padding=10)
        actions_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        actions = [
            ("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞", self.restart_agent),
            ("üìã –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤", self.export_logs),
            ("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞", self.clear_cache),
            ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", self.show_settings)
        ]
        
        for i, (label, action) in enumerate(actions):
            btn = ttk.Button(actions_frame, text=label, command=action)
            btn.grid(row=i//2, column=i%2, padx=5, pady=5, sticky='ew')
    
    def setup_evolution_tab(self, notebook):
        """–í–∫–ª–∞–¥–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞"""
        evolution_frame = ttk.Frame(notebook)
        notebook.add(evolution_frame, text="üöÄ –≠–≤–æ–ª—é—Ü–∏—è")
        
        # –°—Ç–∞—Ç—É—Å —ç–≤–æ–ª—é—Ü–∏–∏
        status_frame = ttk.LabelFrame(evolution_frame, text="–°—Ç–∞—Ç—É—Å —ç–≤–æ–ª—é—Ü–∏–∏", padding=10)
        status_frame.pack(fill=tk.X, padx=10, pady=10)
        
        self.evolution_status = ttk.Label(status_frame, text="–°—Ç–∞—Ç—É—Å: –∑–∞–≥—Ä—É–∑–∫–∞...")
        self.evolution_status.pack(anchor=tk.W)
        
        self.evolution_progress = ttk.Progressbar(status_frame, mode='determinate')
        self.evolution_progress.pack(fill=tk.X, pady=(5, 0))
        
        # –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        actions_frame = ttk.LabelFrame(evolution_frame, text="–≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", padding=10)
        actions_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        evolution_actions = [
            ("üß† –£–ª—É—á—à–∏—Ç—å –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É", "–£–ª—É—á—à–∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É"),
            ("üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ", "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —Å–∏—Å—Ç–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—è"),
            ("üíæ –†–∞—Å—à–∏—Ä–∏—Ç—å –ø–∞–º—è—Ç—å", "–†–∞—Å—à–∏—Ä—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏"),
            ("üîß –£–ª—É—á—à–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "–£–ª—É—á—à–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"),
            ("üé® –†–∞–∑–≤–∏—Ç—å —ç–º–æ—Ü–∏–∏", "–†–∞–∑–≤–∏–≤–∞–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É"),
            ("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–≤–æ–ª—é—Ü–∏—é", "–ó–∞–ø—É—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å —ç–≤–æ–ª—é—Ü–∏–∏")
        ]
        
        for i, (label, command) in enumerate(evolution_actions):
            btn = ttk.Button(actions_frame, text=label, 
                           command=lambda cmd=command: self.evolution_command(cmd))
            btn.grid(row=i//2, column=i%2, padx=5, pady=5, sticky='ew')
    
    def start_agent(self):
        """–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞"""
        if not self.agent_active:
            self.agent_active = True
            self.agent_thread = threading.Thread(target=self.agent_loop, daemon=True)
            self.agent_thread.start()
            
            self.status_label.config(text="üü¢ –ê–≥–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω")
            self.start_btn.config(state='disabled')
            self.stop_btn.config(state='normal')
            
            self.log_message("ü§ñ –ê–≥–µ–Ω—Ç ARK v2.8 –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    def stop_agent(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞"""
        self.agent_active = False
        self.status_label.config(text="üî¥ –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.start_btn.config(state='normal')
        self.stop_btn.config(state='disabled')
        
        self.log_message("‚èπÔ∏è –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def restart_agent(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞"""
        self.stop_agent()
        time.sleep(1)
        self.start_agent()
    
    def agent_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≥–µ–Ω—Ç–∞"""
        while self.agent_active:
            try:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–Ω–∞–Ω–∏—è
                consciousness_state = self.consciousness.get_consciousness_status()
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π
                emotion_state = self.cognitive_brain.emotion_engine.get_emotional_state()
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.root.after(0, self.update_status, consciousness_state, emotion_state)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                self.root.after(0, self.update_system_info)
                
                time.sleep(2)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                
            except Exception as e:
                self.root.after(0, self.log_message, f"‚ùå –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞: {e}")
                time.sleep(5)
    
    def update_status(self, consciousness_state, emotion_state):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ UI"""
        try:
            self.consciousness_label.config(text=f"üß† –°–æ–∑–Ω–∞–Ω–∏–µ: {consciousness_state.get('state', 'unknown')}")
            self.emotion_label.config(text=f"üòä –≠–º–æ—Ü–∏—è: {emotion_state.get('dominant_emotion', 'unknown')}")
        except:
            pass
    
    def update_system_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        try:
            cpu_percent = psutil.cpu_percent()
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            self.cpu_label.config(text=f"CPU: {cpu_percent:.1f}%")
            self.memory_label.config(text=f"RAM: {memory.percent:.1f}% ({memory.used // 1024**3:.1f}GB / {memory.total // 1024**3:.1f}GB)")
            self.disk_label.config(text=f"–î–∏—Å–∫: {disk.percent:.1f}% ({disk.used // 1024**3:.1f}GB / {disk.total // 1024**3:.1f}GB)")
        except:
            pass
    
    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É"""
        message = self.message_entry.get().strip()
        if not message:
            return
            
        # –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.message_entry.delete(0, tk.END)
        
        # –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
        self.chat_display.insert(tk.END, f"\nüë§ –í—ã: {message}\n", "user")
        self.chat_display.see(tk.END)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self._process_message, args=(message,), daemon=True).start()
    
    def _process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
            import asyncio
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                result = loop.run_until_complete(self.cognitive_brain.process_input(message))
                loop.close()
            except Exception as e:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")
                result = None
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            if "–ø—Ä–∏–≤–µ—Ç" in message.lower():
                response = "–ü—Ä–∏–≤–µ—Ç! –Ø ARK v2.8 - –≤–∞—à –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π –ò–ò-–∞–≥–µ–Ω—Ç. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?"
            elif "–∫–∞–∫ –¥–µ–ª–∞" in message.lower():
                response = "–°–ø–∞—Å–∏–±–æ, —É –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏."
            elif "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å" in message.lower():
                response = """–Ø —É–º–µ—é:
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —ç–≤–æ–ª—é—Ü–∏—é –∞–≥–µ–Ω—Ç–∞
‚Ä¢ –û–±—â–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –í—ã—è–≤–ª—è—Ç—å —É–∑–∫–∏–µ –º–µ—Å—Ç–∞
‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å —Å –ø–∞–º—è—Ç—å—é –∏ —Å–æ–∑–Ω–∞–Ω–∏–µ–º"""
            elif "—Å—Ç–∞—Ç—É—Å" in message.lower():
                try:
                    consciousness_state = self.consciousness.get_consciousness_status()
                    emotion_state = self.cognitive_brain.emotion_engine.get_emotional_state()
                    response = f"""–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:
‚Ä¢ –°–æ–∑–Ω–∞–Ω–∏–µ: {consciousness_state.get('state', 'unknown')}
‚Ä¢ –≠–º–æ—Ü–∏—è: {emotion_state.get('dominant_emotion', 'unknown')}
‚Ä¢ –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –æ—Ç–¥–µ–ª—ã: 6 –∞–∫—Ç–∏–≤–Ω—ã—Ö
‚Ä¢ –†–∞–±–æ—á–∞—è –ø–∞–º—è—Ç—å: {len(self.cognitive_brain.working_memory.items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
                except Exception as e:
                    response = f"–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: –∞–∫—Ç–∏–≤–µ–Ω (–¥–µ—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e})"
            else:
                if result and isinstance(result, dict):
                    decision = result.get('final_decision', '–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω')
                    confidence = result.get('confidence_score', 0.0)
                    response = f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {decision} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})"
                else:
                    response = f"–û–±—Ä–∞–±–æ—Ç–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å: '{message}'. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result if result else '–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π'}"
            
            # –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –≤ —á–∞—Ç (–≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
            self.root.after(0, lambda: self._add_agent_response(response))
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}"
            self.root.after(0, lambda: self._add_agent_response("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
    
    def _add_agent_response(self, response):
        """–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –≤ —á–∞—Ç"""
        self.chat_display.insert(tk.END, f"ü§ñ ARK: {response}\n", "agent")
        self.chat_display.see(tk.END)
    
    def quick_command(self, command):
        """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞"""
        self.message_entry.delete(0, tk.END)
        self.message_entry.insert(0, command)
        self.send_message()
    
    def run_tool(self, tool_name):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        try:
            if hasattr(self.cognitive_brain, tool_name):
                result = getattr(self.cognitive_brain, tool_name)()
                self.display_response(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name}: {result}")
            else:
                self.display_response(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            self.display_response(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {e}")
    
    def evolution_command(self, command):
        """–ö–æ–º–∞–Ω–¥–∞ —ç–≤–æ–ª—é—Ü–∏–∏"""
        self.send_message()
        self.message_entry.delete(0, tk.END)
        self.message_entry.insert(0, command)
        self.send_message()
    
    def refresh_logs(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤"""
        try:
            log_file = Path("logs/ark.log")
            if log_file.exists():
                with open(log_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    recent_logs = lines[-50:] if len(lines) > 50 else lines
                    self.logs_display.delete(1.0, tk.END)
                    self.logs_display.insert(tk.END, ''.join(recent_logs))
        except Exception as e:
            self.logs_display.delete(1.0, tk.END)
            self.logs_display.insert(tk.END, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    
    def log_message(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        timestamp = time.strftime("%H:%M:%S")
        self.logs_display.insert(tk.END, f"[{timestamp}] {message}\n")
        self.logs_display.see(tk.END)
    
    def export_logs(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤"""
        try:
            filename = f"ark_logs_{time.strftime('%Y%m%d_%H%M%S')}.txt"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(self.logs_display.get(1.0, tk.END))
            messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—á–µ–π –ø–∞–º—è—Ç–∏
            self.cognitive_brain.working_memory.clear()
            self.log_message("üßπ –ö—ç—à –æ—á–∏—â–µ–Ω")
            messagebox.showinfo("–û—á–∏—Å—Ç–∫–∞", "–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    root = tk.Tk()
    app = ARKDesktopApp(root)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    def on_closing():
        app.stop_agent()
        root.destroy()
    
    root.protocol("WM_DELETE_WINDOW", on_closing)
    root.mainloop()

if __name__ == "__main__":
    main() 