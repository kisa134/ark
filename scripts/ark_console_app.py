#!/usr/bin/env python3
"""
ARK v2.8 - –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
–ü—Ä—è–º–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–≥–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª
"""

import sys
import time
import threading
import json
import os
from pathlib import Path
import psutil
import subprocess

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from mind.cognitive_architecture import cognitive_brain
from mind.advanced_consciousness import AdvancedConsciousnessModel
from evaluation.auto_reporter import auto_reporter

class ARKConsoleApp:
    def __init__(self):
        self.cognitive_brain = cognitive_brain
        self.consciousness = AdvancedConsciousnessModel()
        self.auto_reporter = auto_reporter
        self.running = True
        self.agent_active = False
        
    def print_banner(self):
        """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞ ARK"""
        banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                           ARK v2.8 - –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π –ò–ò-–∞–≥–µ–Ω—Ç                    ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  üß† –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞    üéØ –°–∏—Å—Ç–µ–º–∞ –≤–Ω–∏–º–∞–Ω–∏—è    üíæ –†–∞–±–æ—á–∞—è –ø–∞–º—è—Ç—å     ‚ïë
‚ïë  üòä –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞      üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã         üöÄ –≠–≤–æ–ª—é—Ü–∏—è           ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥, 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞                        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        print(banner)
    
    def print_status(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
        try:
            consciousness_state = self.consciousness.get_consciousness_status()
            emotion_state = self.cognitive_brain.emotion_engine.get_emotional_state()
            
            print(f"\nüìä –°–¢–ê–¢–£–° –ê–ì–ï–ù–¢–ê:")
            print(f"   üß† –°–æ–∑–Ω–∞–Ω–∏–µ: {consciousness_state.get('state', 'unknown')}")
            print(f"   üòä –≠–º–æ—Ü–∏—è: {emotion_state.get('dominant_emotion', 'unknown')}")
            print(f"   üéØ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if self.agent_active else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
            
            # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            cpu_percent = psutil.cpu_percent()
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            print(f"\nüíª –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
            print(f"   CPU: {cpu_percent:.1f}%")
            print(f"   RAM: {memory.percent:.1f}% ({memory.used // 1024**3:.1f}GB / {memory.total // 1024**3:.1f}GB)")
            print(f"   –î–∏—Å–∫: {disk.percent:.1f}% ({disk.used // 1024**3:.1f}GB / {disk.total // 1024**3:.1f}GB)")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def print_help(self):
        """–í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏"""
        help_text = """
üìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:

ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–º:
  start          - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
  stop           - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
  restart        - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
  status         - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å

üí¨ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:
  chat <—Å–æ–æ–±—â–µ–Ω–∏–µ> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É
  ask <–≤–æ–ø—Ä–æ—Å>     - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–≥–µ–Ω—Ç—É

üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
  analyze         - –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  security        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  bottlenecks     - –ü–æ–∏—Å–∫ —É–∑–∫–∏—Ö –º–µ—Å—Ç
  evolution       - –ü–ª–∞–Ω —ç–≤–æ–ª—é—Ü–∏–∏
  tools           - –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:
  logs            - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
  system          - –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  memory          - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–º—è—Ç–∏
  consciousness   - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–Ω–∞–Ω–∏—è

‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞:
  clear           - –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω
  quit/exit       - –í—ã—Ö–æ–¥
  help            - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° –ü—Ä–∏–º–µ—Ä—ã:
  chat –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?
  ask –ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
  analyze
  status
        """
        print(help_text)
    
    def start_agent(self):
        """–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞"""
        if not self.agent_active:
            self.agent_active = True
            print("üü¢ –ê–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω!")
            
            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            monitor_thread = threading.Thread(target=self.monitor_loop, daemon=True)
            monitor_thread.start()
        else:
            print("‚ö†Ô∏è –ê–≥–µ–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
    
    def stop_agent(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞"""
        self.agent_active = False
        print("üî¥ –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def restart_agent(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞...")
        self.stop_agent()
        time.sleep(1)
        self.start_agent()
    
    def monitor_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.agent_active:
            try:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                consciousness_state = self.consciousness.get_consciousness_status()
                emotion_state = self.cognitive_brain.emotion_engine.get_emotional_state()
                
                # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
                timestamp = time.strftime("%H:%M:%S")
                log_entry = f"[{timestamp}] –°–æ–∑–Ω–∞–Ω–∏–µ: {consciousness_state.get('state', 'unknown')}, –≠–º–æ—Ü–∏—è: {emotion_state.get('dominant_emotion', 'unknown')}\n"
                
                with open("logs/ark_console.log", "a", encoding="utf-8") as f:
                    f.write(log_entry)
                
                time.sleep(5)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(10)
    
    def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–º"""
        try:
            print(f"\nü§ñ ARK –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: '{message}'")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
            import asyncio
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                result = loop.run_until_complete(self.cognitive_brain.process_input(message))
                loop.close()
            except Exception as e:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")
                result = None
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            if "–ø—Ä–∏–≤–µ—Ç" in message.lower():
                response = "–ü—Ä–∏–≤–µ—Ç! –Ø ARK v2.8 - –≤–∞—à –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π –ò–ò-–∞–≥–µ–Ω—Ç. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?"
            elif "–∫–∞–∫ –¥–µ–ª–∞" in message.lower():
                response = "–°–ø–∞—Å–∏–±–æ, —É –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏."
            elif "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å" in message.lower():
                response = """–Ø —É–º–µ—é:
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —ç–≤–æ–ª—é—Ü–∏—é –∞–≥–µ–Ω—Ç–∞
‚Ä¢ –û–±—â–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –í—ã—è–≤–ª—è—Ç—å —É–∑–∫–∏–µ –º–µ—Å—Ç–∞
‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å —Å –ø–∞–º—è—Ç—å—é –∏ —Å–æ–∑–Ω–∞–Ω–∏–µ–º"""
            elif "—Å—Ç–∞—Ç—É—Å" in message.lower():
                try:
                    consciousness_state = self.consciousness.get_consciousness_status()
                    emotion_state = self.cognitive_brain.emotion_engine.get_emotional_state()
                    response = f"""–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:
‚Ä¢ –°–æ–∑–Ω–∞–Ω–∏–µ: {consciousness_state.get('state', 'unknown')}
‚Ä¢ –≠–º–æ—Ü–∏—è: {emotion_state.get('dominant_emotion', 'unknown')}
‚Ä¢ –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –æ—Ç–¥–µ–ª—ã: 6 –∞–∫—Ç–∏–≤–Ω—ã—Ö
‚Ä¢ –†–∞–±–æ—á–∞—è –ø–∞–º—è—Ç—å: {len(self.cognitive_brain.working_memory.items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
                except Exception as e:
                    response = f"–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: –∞–∫—Ç–∏–≤–µ–Ω (–¥–µ—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e})"
            else:
                if result and isinstance(result, dict):
                    decision = result.get('final_decision', '–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω')
                    confidence = result.get('confidence_score', 0.0)
                    response = f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {decision} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})"
                else:
                    response = f"–û–±—Ä–∞–±–æ—Ç–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å: '{message}'. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result if result else '–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π'}"
            
            print(f"ü§ñ ARK: {response}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            print(f"ü§ñ ARK: –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    def run_tool(self, tool_name):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        try:
            print(f"üîß –ó–∞–ø—É—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {tool_name}")
            
            if hasattr(self.cognitive_brain, tool_name):
                result = getattr(self.cognitive_brain, tool_name)()
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            else:
                print(f"‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {e}")
    
    def show_logs(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"""
        try:
            log_file = Path("logs/ark.log")
            if log_file.exists():
                with open(log_file, "r", encoding="utf-8") as f:
                    lines = f.readlines()
                    recent_logs = lines[-20:] if len(lines) > 20 else lines
                    print("\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –õ–û–ì–ò:")
                    print("=" * 50)
                    for line in recent_logs:
                        print(line.rstrip())
            else:
                print("üìã –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    
    def show_system_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        try:
            print("\nüíª –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
            print("=" * 30)
            
            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            print(f"CPU: {cpu_percent:.1f}%")
            
            # –ü–∞–º—è—Ç—å
            memory = psutil.virtual_memory()
            print(f"RAM: {memory.percent:.1f}% ({memory.used // 1024**3:.1f}GB / {memory.total // 1024**3:.1f}GB)")
            
            # –î–∏—Å–∫
            disk = psutil.disk_usage('/')
            print(f"–î–∏—Å–∫: {disk.percent:.1f}% ({disk.used // 1024**3:.1f}GB / {disk.total // 1024**3:.1f}GB)")
            
            # –ü—Ä–æ—Ü–µ—Å—Å—ã
            processes = len(psutil.pids())
            print(f"–ü—Ä–æ—Ü–µ—Å—Å—ã: {processes}")
            
            # –°–µ—Ç—å
            network = psutil.net_io_counters()
            print(f"–°–µ—Ç—å: ‚Üë{network.bytes_sent // 1024**2:.1f}MB ‚Üì{network.bytes_recv // 1024**2:.1f}MB")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    def show_memory_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞"""
        try:
            print("\nüíæ –ü–ê–ú–Ø–¢–¨ –ê–ì–ï–ù–¢–ê:")
            print("=" * 20)
            
            # –†–∞–±–æ—á–∞—è –ø–∞–º—è—Ç—å
            working_memory_items = len(self.cognitive_brain.working_memory.items)
            print(f"–†–∞–±–æ—á–∞—è –ø–∞–º—è—Ç—å: {working_memory_items} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å
            if hasattr(self.cognitive_brain, 'long_term_memory'):
                ltm_items = len(self.cognitive_brain.long_term_memory.items)
                print(f"–î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å: {ltm_items} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å
            emotion_records = len(self.cognitive_brain.emotion_engine.emotion_history)
            print(f"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {emotion_records} –∑–∞–ø–∏—Å–µ–π")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏: {e}")
    
    def show_consciousness_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–Ω–∞–Ω–∏–∏"""
        try:
            print("\nüß† –°–û–ó–ù–ê–ù–ò–ï –ê–ì–ï–ù–¢–ê:")
            print("=" * 25)
            
            consciousness_state = self.consciousness.get_consciousness_status()
            print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {consciousness_state.get('state', 'unknown')}")
            print(f"–£—Ä–æ–≤–µ–Ω—å: {consciousness_state.get('level', 'unknown')}")
            print(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {consciousness_state.get('activity', 'unknown')}")
            
            emotion_state = self.cognitive_brain.emotion_engine.get_emotional_state()
            print(f"–î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è: {emotion_state.get('dominant_emotion', 'unknown')}")
            print(f"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {emotion_state.get('emotional_stability', 'unknown')}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–Ω–∞–Ω–∏–∏: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.print_banner()
        self.start_agent()
        
        while self.running:
            try:
                # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –≤–≤–æ–¥—É
                command = input("\nü§ñ ARK> ").strip()
                
                if not command:
                    continue
                
                # –†–∞–∑–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã
                parts = command.split(' ', 1)
                cmd = parts[0].lower()
                args = parts[1] if len(parts) > 1 else ""
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                if cmd in ['quit', 'exit', 'q']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    self.stop_agent()
                    break
                    
                elif cmd == 'help':
                    self.print_help()
                    
                elif cmd == 'status':
                    self.print_status()
                    
                elif cmd == 'start':
                    self.start_agent()
                    
                elif cmd == 'stop':
                    self.stop_agent()
                    
                elif cmd == 'restart':
                    self.restart_agent()
                    
                elif cmd == 'clear':
                    os.system('clear' if os.name == 'posix' else 'cls')
                    self.print_banner()
                    
                elif cmd == 'chat':
                    if args:
                        self.process_message(args)
                    else:
                        print("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                        
                elif cmd == 'ask':
                    if args:
                        self.process_message(args)
                    else:
                        print("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
                        
                elif cmd == 'analyze':
                    self.run_tool('analyze_performance')
                    
                elif cmd == 'security':
                    self.run_tool('check_security')
                    
                elif cmd == 'bottlenecks':
                    self.run_tool('identify_bottlenecks')
                    
                elif cmd == 'evolution':
                    self.run_tool('plan_evolution')
                    
                elif cmd == 'tools':
                    print("\nüîß –î–û–°–¢–£–ü–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:")
                    tools = ['analyze_performance', 'check_security', 'identify_bottlenecks', 
                            'review_code_changes', 'validate_syntax', 'plan_evolution']
                    for tool in tools:
                        print(f"  ‚Ä¢ {tool}")
                        
                elif cmd == 'logs':
                    self.show_logs()
                    
                elif cmd == 'system':
                    self.show_system_info()
                    
                elif cmd == 'memory':
                    self.show_memory_info()
                    
                elif cmd == 'consciousness':
                    self.show_consciousness_info()
                    
                else:
                    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    self.process_message(command)
                    
            except KeyboardInterrupt:
                print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                self.stop_agent()
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = ARKConsoleApp()
    app.run()

if __name__ == "__main__":
    main() 