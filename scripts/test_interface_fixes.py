#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from mind.cognitive_architecture import EmotionEngine, Dispatcher, ReasoningTask
from datetime import datetime


async def test_emotion_engine():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ EmotionEngine"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EmotionEngine...")
    
    emotion_engine = EmotionEngine()
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ get_emotional_state –±–µ–∑ –æ—à–∏–±–æ–∫
    try:
        state = emotion_engine.get_emotional_state()
        print(f"  ‚úÖ get_emotional_state —Ä–∞–±–æ—Ç–∞–µ—Ç: {state}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ get_emotional_state: {e}")
        return False
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ _calculate_stability —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    try:
        stability = emotion_engine._calculate_stability()
        print(f"  ‚úÖ _calculate_stability —Ä–∞–±–æ—Ç–∞–µ—Ç: {stability}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ _calculate_stability: {e}")
        return False
    
    # –¢–µ—Å—Ç 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        emotion_engine.recent_triggers = [
            {"dominant_emotion": "joy", "timestamp": datetime.now()},
            {"dominant_emotion": "trust", "timestamp": datetime.now()},
            {"dominant_emotion": "joy", "timestamp": datetime.now()}
        ]
        stability = emotion_engine._calculate_stability()
        print(f"  ‚úÖ _calculate_stability —Å –¥–∞–Ω–Ω—ã–º–∏: {stability}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ _calculate_stability —Å –¥–∞–Ω–Ω—ã–º–∏: {e}")
        return False
    
    return True


def test_dispatcher():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ Dispatcher"""
    print("üö¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Dispatcher...")
    
    dispatcher = Dispatcher()
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    try:
        task = {"type": "reasoning", "data": "test"}
        task_id = dispatcher.schedule_reasoning(task, 1)
        print(f"  ‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        return False
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    try:
        next_task = dispatcher.get_next_task()
        if next_task:
            print(f"  ‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–ª—É—á–µ–Ω–∞: {next_task.task_id}")
        else:
            print("  ‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        return False
    
    # –¢–µ—Å—Ç 3: –°—Ç–∞—Ç—É—Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    try:
        status = dispatcher.get_dispatcher_status()
        print(f"  ‚úÖ –°—Ç–∞—Ç—É—Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {status}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False
    
    return True


def test_reasoning_task():
    """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∞ ReasoningTask"""
    print("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ReasoningTask...")
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    try:
        task1 = ReasoningTask(priority=1, task_id="task1", task_data={"test": "data1"})
        task2 = ReasoningTask(priority=2, task_id="task2", task_data={"test": "data2"})
        print(f"  ‚úÖ –ó–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω—ã: {task1.task_id}, {task2.task_id}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á: {e}")
        return False
    
    # –¢–µ—Å—Ç 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
    try:
        result = task1 < task2  # task1 –∏–º–µ–µ—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        print(f"  ‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á: task1 < task2 = {result}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
        return False
    
    return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ")
    print("=" * 60)
    
    # –¢–µ—Å—Ç EmotionEngine
    emotion_success = await test_emotion_engine()
    
    # –¢–µ—Å—Ç Dispatcher
    dispatcher_success = test_dispatcher()
    
    # –¢–µ—Å—Ç ReasoningTask
    reasoning_success = test_reasoning_task()
    
    print("\n" + "=" * 60)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"  EmotionEngine: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if emotion_success else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"  Dispatcher: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if dispatcher_success else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"  ReasoningTask: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if reasoning_success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    if emotion_success and dispatcher_success and reasoning_success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False


if __name__ == "__main__":
    asyncio.run(main()) 