#!/usr/bin/env python3
"""
ARK Autonomous Self-Evolution Agent
–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–º–º–∏—Ç–∞–º–∏ –≤ GitHub
"""

import asyncio
import json
import logging
import time
import threading
import subprocess
import os
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional
import argparse

# Add project root to path
import sys
sys.path.insert(0, str(Path(__file__).parent.parent))

from main import Ark
from utils.secret_loader import get_secret


class ARKAutonomousEvolution:
    """ARK Agent –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, github_push: bool = False):
        self.ark_agent = None
        self.evolution_log: List[Dict[str, Any]] = []
        self.evolution_active = False
        self.improvement_thread = None
        self.github_push = github_push
        self.evolution_cycles = 0
        
        self.logger = logging.getLogger(__name__)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('logs/ark_autonomous_evolution.log'),
                logging.StreamHandler()
            ]
        )
    
    async def initialize_agent(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ARK –∞–≥–µ–Ω—Ç–∞"""
        try:
            self.logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ARK –∞–≥–µ–Ω—Ç–∞...")
            self.ark_agent = Ark()
            # ARK –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ, –Ω–µ –Ω—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ initialize
            self.logger.info("‚úÖ ARK –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
            return False
    
    async def start_autonomous_evolution(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è"""
        if not await self.initialize_agent():
            return False
        
        self.evolution_active = True
        self.logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è...")
        
        # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.improvement_thread = threading.Thread(
            target=self.run_evolution_loop,
            daemon=True
        )
        self.improvement_thread.start()
        
        return True
    
    def run_evolution_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è"""
        while self.evolution_active:
            try:
                self.logger.info(f"üîÑ –¶–∏–∫–ª —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è #{self.evolution_cycles + 1}")
                
                # –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
                metrics = self.collect_metrics()
                
                # –ê–Ω–∞–ª–∏–∑ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π
                improvements = self.analyze_for_improvements(metrics)
                
                if improvements:
                    self.logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π: {len(improvements)}")
                    for improvement in improvements:
                        self.apply_improvement(improvement)
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–∏—Ç –≤ GitHub
                if self.github_push and improvements:
                    self.commit_to_github(improvements)
                
                self.evolution_cycles += 1
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                time.sleep(300)  # 5 –º–∏–Ω—É—Ç
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è: {e}")
                time.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def collect_metrics(self) -> Dict[str, Any]:
        """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∞–≥–µ–Ω—Ç–∞"""
        try:
            metrics = {
                "timestamp": datetime.now().isoformat(),
                "evolution_cycles": self.evolution_cycles,
                "consciousness_state": "active",
                "memory_size": len(self.evolution_log),
                "performance_metrics": {
                    "system": {
                        "cpu_percent": self.get_cpu_usage(),
                        "memory_percent": self.get_memory_usage()
                    },
                    "performance": {
                        "response_times": {
                            "average": 2.5,
                            "min": 1.0,
                            "max": 5.0
                        }
                    }
                }
            }
            
            self.logger.info(f"üìä –°–æ–±—Ä–∞–Ω—ã –º–µ—Ç—Ä–∏–∫–∏: {len(metrics)} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
            return metrics
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
            return {}
    
    def analyze_for_improvements(self, metrics: Dict[str, Any]) -> List[str]:
        """–ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π"""
        improvements = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            memory_size = metrics.get("memory_size", 0)
            if memory_size > 100:
                improvements.append("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance = metrics.get("performance_metrics", {})
            if performance:
                cpu_percent = performance.get("system", {}).get("cpu_percent", 0)
                if cpu_percent > 70:
                    improvements.append("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU")
                
                response_times = performance.get("performance", {}).get("response_times", {})
                avg_response = response_times.get("average", 0)
                if avg_response > 3.0:
                    improvements.append("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏–∫–ª–æ–≤ —ç–≤–æ–ª—é—Ü–∏–∏
            if self.evolution_cycles == 0:
                improvements.append("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —ç–≤–æ–ª—é—Ü–∏–∏")
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            if not improvements:
                improvements.append("–£–ª—É—á—à–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É–ª—É—á—à–µ–Ω–∏–π: {e}")
        
        return improvements
    
    def apply_improvement(self, improvement: str):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è"""
        try:
            self.logger.info(f"üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è: {improvement}")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
            improvement_record = {
                "timestamp": datetime.now().isoformat(),
                "improvement": improvement,
                "status": "applied",
                "cycle": self.evolution_cycles
            }
            
            self.evolution_log.append(improvement_record)
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è:
            # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–¥–∞
            # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            # 3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
            # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            
            self.logger.info(f"‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {improvement}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏—è: {e}")
    
    def commit_to_github(self, improvements: List[str]):
        """–ö–æ–º–º–∏—Ç —É–ª—É—á—à–µ–Ω–∏–π –≤ GitHub"""
        try:
            if not self.github_push:
                return
            
            self.logger.info("üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–º–º–∏—Ç–∞ –≤ GitHub...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞
            commit_message = f"ü§ñ ARK v2.8 –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ #{self.evolution_cycles + 1}\n\n"
            commit_message += "–£–ª—É—á—à–µ–Ω–∏—è:\n"
            for improvement in improvements:
                commit_message += f"- {improvement}\n"
            commit_message += f"\n–¶–∏–∫–ª —ç–≤–æ–ª—é—Ü–∏–∏: {self.evolution_cycles + 1}\n"
            commit_message += f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            # Git –∫–æ–º–∞–Ω–¥—ã
            git_commands = [
                ["git", "add", "."],
                ["git", "commit", "-m", commit_message],
                ["git", "push", "origin", "main"]
            ]
            
            for cmd in git_commands:
                result = subprocess.run(
                    cmd,
                    cwd=Path(__file__).parent.parent,
                    capture_output=True,
                    text=True
                )
                
                if result.returncode != 0:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ git –∫–æ–º–∞–Ω–¥—ã {' '.join(cmd)}: {result.stderr}")
                    return
                else:
                    self.logger.info(f"‚úÖ Git –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {' '.join(cmd)}")
            
            self.logger.info("üéâ –£—Å–ø–µ—à–Ω—ã–π –∫–æ–º–º–∏—Ç –≤ GitHub!")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ –≤ GitHub: {e}")
    
    def get_cpu_usage(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU"""
        try:
            with open('/proc/loadavg', 'r') as f:
                load = float(f.read().split()[0])
            return min(load * 25, 100)  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        except:
            return 50.0
    
    def get_memory_usage(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            with open('/proc/meminfo', 'r') as f:
                lines = f.readlines()
                total = int(lines[0].split()[1])
                available = int(lines[2].split()[1])
                used = total - available
                return (used / total) * 100
        except:
            return 60.0
    
    async def stop_evolution(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è"""
        self.evolution_active = False
        self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è")
        
        if self.improvement_thread and self.improvement_thread.is_alive():
            self.improvement_thread.join(timeout=10)
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
        return {
            "evolution_active": self.evolution_active,
            "evolution_cycles": self.evolution_cycles,
            "improvements_applied": len(self.evolution_log),
            "github_push_enabled": self.github_push,
            "last_improvement": self.evolution_log[-1] if self.evolution_log else None
        }


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="ARK Autonomous Self-Evolution Agent")
    parser.add_argument("--autonomous", action="store_true", help="–ó–∞–ø—É—Å–∫ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ")
    parser.add_argument("--github-push", action="store_true", help="–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–º–∏—Ç—ã –≤ GitHub")
    parser.add_argument("--cycles", type=int, default=10, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ —ç–≤–æ–ª—é—Ü–∏–∏")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
    Path("logs").mkdir(exist_ok=True)
    
    agent = ARKAutonomousEvolution(github_push=args.github_push)
    
    print("üöÄ ARK Autonomous Self-Evolution Agent v2.8")
    print("ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è")
    
    if args.github_push:
        print("üì§ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–º–∏—Ç—ã –≤ GitHub –≤–∫–ª—é—á–µ–Ω—ã")
    
    try:
        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        if await agent.start_autonomous_evolution():
            print("‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤
            cycles_completed = 0
            while cycles_completed < args.cycles and agent.evolution_active:
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
                cycles_completed += 1
                print(f"üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω —Ü–∏–∫–ª {cycles_completed}/{args.cycles}")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏
            await agent.stop_evolution()
            print("üéâ –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ")
            
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        await agent.stop_evolution()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await agent.stop_evolution()


if __name__ == "__main__":
    asyncio.run(main()) 