#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ–∑–Ω–∞–Ω–∏—è
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É MotivationalEngine –∏ ConsciousnessCore
"""

import asyncio
import logging
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
import sys
sys.path.insert(0, '.')

from mind.motivational_engine import MotivationalEngine, Desire, DesireType
from mind.consciousness_core import ConsciousnessCore


async def test_motivational_engine():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç MotivationalEngine"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MotivationalEngine")
    print("=" * 50)
    
    engine = MotivationalEngine()
    
    # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∂–µ–ª–∞–Ω–∏–π
    print("\nüìù –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∂–µ–ª–∞–Ω–∏–π")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    test_states = [
        {"temperature": 75, "cpu_usage": 60, "memory_usage": 70},  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        {"temperature": 85, "cpu_usage": 95, "memory_usage": 90},  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        {"temperature": 45, "cpu_usage": 30, "memory_usage": 40}   # –ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ]
    
    for i, state in enumerate(test_states, 1):
        print(f"\n  –°–æ—Å—Ç–æ—è–Ω–∏–µ {i}: {state}")
        desires = engine.generate_desires(state, {"recent": []})
        
        print(f"  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∂–µ–ª–∞–Ω–∏–π: {len(desires)}")
        for j, desire in enumerate(desires[:3], 1):
            print(f"    {j}. {desire.name} (–≤–µ—Å: {desire.weight:.2f}, —Å—Ä–æ—á–Ω–æ—Å—Ç—å: {desire.urgency:.2f})")
    
    # –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
    print("\nüìù –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞")
    
    outcomes = [
        {"success": True, "type": "learning"},
        {"success": False, "type": "social"},
        {"success": True, "type": "maintenance"}
    ]
    
    for outcome in outcomes:
        print(f"  –ò—Å—Ö–æ–¥: {outcome}")
        engine.update_character_traits(outcome)
        print(f"  –•–∞—Ä–∞–∫—Ç–µ—Ä: {engine.character_traits}")
    
    # –¢–µ—Å—Ç 3: –°–≤–æ–¥–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
    print("\nüìù –¢–µ—Å—Ç 3: –°–≤–æ–¥–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞")
    summary = engine.get_character_summary()
    print(f"  –¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏: {summary['personality_type']}")
    print(f"  –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —á–µ—Ä—Ç–∞: {summary['dominant_trait']}")
    print(f"  –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: {summary['traits']}")


async def test_consciousness_core():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ConsciousnessCore"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ConsciousnessCore")
    print("=" * 50)
    
    core = ConsciousnessCore()
    
    # –¢–µ—Å—Ç 1: –¶–∏–∫–ª —Å–æ–∑–Ω–∞–Ω–∏—è
    print("\nüìù –¢–µ—Å—Ç 1: –¶–∏–∫–ª —Å–æ–∑–Ω–∞–Ω–∏—è")
    
    for cycle in range(5):
        print(f"\n  –¶–∏–∫–ª {cycle + 1}:")
        result = await core.consciousness_cycle_step()
        
        print(f"    –¶–∏–∫–ª: {result['cycle']}")
        if 'primary_desire' in result:
            print(f"    –ì–ª–∞–≤–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ: {result['primary_desire']}")
            print(f"    –†–µ—à–µ–Ω–∏–µ: {result['decision']}")
            print(f"    –£—Å–ø–µ—Ö: {result['outcome']['success']}")
        else:
            print(f"    –°—Ç–∞—Ç—É—Å: {result['status']}")
    
    # –¢–µ—Å—Ç 2: –°—Ç–∞—Ç—É—Å —Å–æ–∑–Ω–∞–Ω–∏—è
    print("\nüìù –¢–µ—Å—Ç 2: –°—Ç–∞—Ç—É—Å —Å–æ–∑–Ω–∞–Ω–∏—è")
    status = core.get_consciousness_status()
    print(f"  –¶–∏–∫–ª–æ–≤: {status['cycle']}")
    print(f"  –¢–µ–∫—É—â–∏–µ –∂–µ–ª–∞–Ω–∏—è: {status['current_desires']}")
    print(f"  –ú—ã—Å–ª–µ–π: {status['recent_thoughts']}")
    print(f"  –†–µ—à–µ–Ω–∏–π: {status['recent_decisions']}")
    print(f"  –†–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏: {status['memory_size']}")
    
    # –¢–µ—Å—Ç 3: –ú—ã—Å–ª–∏ –∏ —Ä–µ—à–µ–Ω–∏—è
    print("\nüìù –¢–µ—Å—Ç 3: –ú—ã—Å–ª–∏ –∏ —Ä–µ—à–µ–Ω–∏—è")
    
    thoughts = core.get_thoughts_summary()
    print(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º—ã—Å–ª–∏ ({len(thoughts)}):")
    for thought in thoughts[-3:]:
        print(f"    - {thought['content'][:50]}... ({thought['type']})")
    
    decisions = core.get_decisions_summary()
    print(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è ({len(decisions)}):")
    for decision in decisions[-3:]:
        print(f"    - {decision['action']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {decision['confidence']:.2f})")


async def test_consciousness_cycle():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–∑–Ω–∞–Ω–∏—è"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–∑–Ω–∞–Ω–∏—è")
    print("=" * 50)
    
    core = ConsciousnessCore()
    
    print("–ó–∞–ø—É—Å–∫ 10 —Ü–∏–∫–ª–æ–≤ —Å–æ–∑–Ω–∞–Ω–∏—è...")
    
    for cycle in range(10):
        result = await core.consciousness_cycle_step()
        
        print(f"\nüîÑ –¶–∏–∫–ª {cycle + 1}:")
        if 'primary_desire' in result:
            print(f"  üéØ –ñ–µ–ª–∞–Ω–∏–µ: {result['primary_desire']}")
            print(f"  ‚ö° –î–µ–π—Å—Ç–≤–∏–µ: {result['decision']}")
            print(f"  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–£—Å–ø–µ—Ö' if result['outcome']['success'] else '–ù–µ—É–¥–∞—á–∞'}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä
            traits = result['character_traits']
            dominant = max(traits.items(), key=lambda x: x[1])
            print(f"  üß† –•–∞—Ä–∞–∫—Ç–µ—Ä: {dominant[0]} ({dominant[1]:.2f})")
        else:
            print(f"  üò¥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏–π")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
        await asyncio.sleep(1)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
    print("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞:")
    status = core.get_consciousness_status()
    character = status['character']
    
    print(f"  –í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤: {status['cycle']}")
    print(f"  –¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏: {character['personality_type']}")
    print(f"  –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —á–µ—Ä—Ç–∞: {character['dominant_trait']}")
    print(f"  –í—Å–µ–≥–æ –º—ã—Å–ª–µ–π: {status['recent_thoughts']}")
    print(f"  –í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–∏–π: {status['recent_decisions']}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ–∑–Ω–∞–Ω–∏—è")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç MotivationalEngine
        await test_motivational_engine()
        
        # –¢–µ—Å—Ç ConsciousnessCore
        await test_consciousness_core()
        
        # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        await test_consciousness_cycle()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main()) 