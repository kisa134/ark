#!/usr/bin/env python3
"""
–¢–µ—Å—Ç LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ARK v2.8
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama –∏ —Ä–∞–±–æ—Ç—É –æ—Ç–¥–µ–ª–æ–≤ –º–æ–∑–≥–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ LLM
"""

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from mind.cognitive_architecture import cognitive_brain, BrainDepartment
from psyche.agent_tools import AgentTools

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

async def test_ollama_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama"""
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama...")
    
    try:
        import requests
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama
        response = requests.get("http://localhost:11434/api/tags", timeout=5)
        
        if response.status_code == 200:
            models = response.json().get("models", [])
            print(f"‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω! –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
            
            for model in models:
                print(f"  üì¶ {model.get('name', 'Unknown')} ({model.get('size', 0)} bytes)")
            
            return True
        else:
            print(f"‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {e}")
        return False

async def test_department_llm():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –æ—Ç–¥–µ–ª–æ–≤ –º–æ–∑–≥–∞ —Å LLM"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤ –º–æ–∑–≥–∞ —Å LLM...")
    
    test_input = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–≥–æ –º–æ–∑–≥–∞
        brain_status = cognitive_brain.get_brain_status()
        departments = brain_status.get("departments", {})
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç–¥–µ–ª–æ–≤: {len(departments)}")
        
        for dept_name, dept_info in departments.items():
            print(f"\nüèõÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {dept_name}...")
            print(f"  –ú–æ–¥–µ–ª—å: {dept_info.get('model', 'Unknown')}")
            print(f"  –°—Ç–∞—Ç—É—Å: {dept_info.get('status', 'Unknown')}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª
            if hasattr(cognitive_brain, 'brain_trust'):
                # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —á–µ—Ä–µ–∑ pipeline
                print(f"  ‚úÖ –û—Ç–¥–µ–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                print(f"  ‚ö†Ô∏è –û—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ brain_trust")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π pipeline
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ pipeline...")
        result = await cognitive_brain.process_input(test_input)
        
        if result["success"]:
            consensus = result["consensus"]
            print(f"‚úÖ Pipeline —É—Å–ø–µ—à–µ–Ω!")
            print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {consensus.confidence_score:.2f}")
            print(f"  –†–µ—à–µ–Ω–∏–µ: {consensus.final_decision[:200]}...")
            print(f"  –û—Ç–¥–µ–ª–æ–≤ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ: {len(consensus.reasoning_trace)}")
        else:
            print(f"‚ùå Pipeline –ø—Ä–æ–≤–∞–ª–µ–Ω: {result.get('error')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤: {e}")

async def test_tools_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    
    try:
        tools = AgentTools()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        test_tools = [
            ("analyze_performance", tools.analyze_performance),
            ("plan_evolution", tools.plan_evolution),
            ("review_code_changes", tools.review_code_changes),
            ("validate_syntax", tools.validate_syntax),
            ("check_security", tools.check_security),
            ("identify_bottlenecks", tools.identify_bottlenecks)
        ]
        
        for tool_name, tool_func in test_tools:
            print(f"\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {tool_name}...")
            
            try:
                if tool_name == "analyze_performance":
                    result = tool_func("system")
                elif tool_name == "plan_evolution":
                    result = tool_func()
                elif tool_name == "review_code_changes":
                    result = tool_func("main.py", "Added new feature")
                elif tool_name == "validate_syntax":
                    result = tool_func("print('Hello, World!')", "python")
                elif tool_name == "check_security":
                    result = tool_func("system")
                elif tool_name == "identify_bottlenecks":
                    result = tool_func()
                else:
                    result = tool_func()
                
                if "error" not in result:
                    print(f"  ‚úÖ {tool_name} —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    if isinstance(result, dict):
                        print(f"  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {list(result.keys())}")
                else:
                    print(f"  ‚ùå {tool_name} –æ—à–∏–±–∫–∞: {result.get('error')}")
                    
            except Exception as e:
                print(f"  ‚ùå {tool_name} –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")

async def test_real_llm_processing():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ LLM"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    
    test_cases = [
        "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã",
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–¥–∞",
        "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω —ç–≤–æ–ª—é—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞",
        "–í—ã—è–≤–∏ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞ –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ"
    ]
    
    for i, test_input in enumerate(test_cases, 1):
        print(f"\nüìù –¢–µ—Å—Ç {i}: {test_input}")
        
        try:
            result = await cognitive_brain.process_input(test_input)
            
            if result["success"]:
                consensus = result["consensus"]
                print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                print(f"  üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {consensus.confidence_score:.2f}")
                print(f"  üß† –†–µ—à–µ–Ω–∏–µ: {consensus.final_decision[:150]}...")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º reasoning trace
                for j, chain in enumerate(consensus.reasoning_trace[:3], 1):
                    print(f"  üìã –û—Ç–¥–µ–ª {j}: {chain.department.name}")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
                
        except Exception as e:
            print(f"  ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß† ARK v2.8 LLM Integration Test Suite")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama
    ollama_available = await test_ollama_connection()
    
    # –¢–µ—Å—Ç 2: –û—Ç–¥–µ–ª—ã –º–æ–∑–≥–∞
    await test_department_llm()
    
    # –¢–µ—Å—Ç 3: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    await test_tools_integration()
    
    # –¢–µ—Å—Ç 4: –†–µ–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    if ollama_available:
        await test_real_llm_processing()
    else:
        print("\n‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–π LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏ (Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main()) 