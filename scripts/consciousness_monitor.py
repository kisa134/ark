#!/usr/bin/env python3
"""
ConsciousnessMonitor - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–Ω–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
"""

import asyncio
import json
import logging
import time
import sys
from datetime import datetime
from typing import Dict, Any
import threading

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '.')

from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
import uvicorn

from mind.consciousness_core import ConsciousnessCore

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="ARK Consciousness Monitor")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
consciousness_core = None
monitoring_active = False
connected_clients = []


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global consciousness_core
    consciousness_core = ConsciousnessCore()
    logger.info("üß† Consciousness Monitor –∑–∞–ø—É—â–µ–Ω")


@app.get("/")
async def get_monitor_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>ARK Consciousness Monitor</title>
        <meta charset="utf-8">
        <style>
            body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background: #1a1a1a; color: #fff; }
            .container { max-width: 1200px; margin: 0 auto; }
            .header { text-align: center; margin-bottom: 30px; }
            .status-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 30px; }
            .card { background: #2a2a2a; border-radius: 10px; padding: 20px; border: 1px solid #444; }
            .card h3 { margin-top: 0; color: #4CAF50; }
            .desire-item { background: #333; padding: 10px; margin: 5px 0; border-radius: 5px; border-left: 4px solid #4CAF50; }
            .thought-item { background: #333; padding: 10px; margin: 5px 0; border-radius: 5px; border-left: 4px solid #2196F3; }
            .decision-item { background: #333; padding: 10px; margin: 5px 0; border-radius: 5px; border-left: 4px solid #FF9800; }
            .trait-bar { background: #444; height: 20px; border-radius: 10px; margin: 5px 0; }
            .trait-fill { height: 100%; border-radius: 10px; background: linear-gradient(90deg, #4CAF50, #8BC34A); }
            .controls { text-align: center; margin: 20px 0; }
            .btn { background: #4CAF50; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin: 0 10px; }
            .btn:hover { background: #45a049; }
            .btn.stop { background: #f44336; }
            .btn.stop:hover { background: #da190b; }
            .log { background: #000; padding: 15px; border-radius: 5px; height: 300px; overflow-y: auto; font-family: monospace; font-size: 12px; }
            .log-entry { margin: 2px 0; }
            .log-info { color: #4CAF50; }
            .log-warning { color: #FF9800; }
            .log-error { color: #f44336; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üß† ARK Consciousness Monitor</h1>
                <p>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–∑–Ω–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</p>
            </div>
            
            <div class="controls">
                <button class="btn" onclick="startMonitoring()">‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–∑–Ω–∞–Ω–∏–µ</button>
                <button class="btn stop" onclick="stopMonitoring()">‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                <button class="btn" onclick="clearLog()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥</button>
            </div>
            
            <div class="status-grid">
                <div class="card">
                    <h3>üéØ –¢–µ–∫—É—â–∏–µ –∂–µ–ª–∞–Ω–∏—è</h3>
                    <div id="desires"></div>
                </div>
                
                <div class="card">
                    <h3>üß† –•–∞—Ä–∞–∫—Ç–µ—Ä</h3>
                    <div id="character"></div>
                </div>
                
                <div class="card">
                    <h3>üí≠ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º—ã—Å–ª–∏</h3>
                    <div id="thoughts"></div>
                </div>
                
                <div class="card">
                    <h3>‚ö° –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è</h3>
                    <div id="decisions"></div>
                </div>
                
                <div class="card">
                    <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                    <div id="stats"></div>
                </div>
                
                <div class="card">
                    <h3>üå°Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</h3>
                    <div id="system-state"></div>
                </div>
            </div>
            
            <div class="card">
                <h3>üìù –õ–æ–≥ —Å–æ–∑–Ω–∞–Ω–∏—è</h3>
                <div id="log" class="log"></div>
            </div>
        </div>
        
        <script>
            let ws = null;
            
            function connect() {
                ws = new WebSocket('ws://localhost:8080/ws');
                
                ws.onopen = function() {
                    addLog('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–∑–Ω–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'info');
                };
                
                ws.onmessage = function(event) {
                    const data = JSON.parse(event.data);
                    updateUI(data);
                };
                
                ws.onclose = function() {
                    addLog('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–æ–∑–Ω–∞–Ω–∏–µ–º –ø–æ—Ç–µ—Ä—è–Ω–æ', 'error');
                    setTimeout(connect, 5000);
                };
                
                ws.onerror = function(error) {
                    addLog('‚ö†Ô∏è –û—à–∏–±–∫–∞ WebSocket: ' + error, 'error');
                };
            }
            
            function updateUI(data) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∂–µ–ª–∞–Ω–∏—è
                if (data.desires) {
                    const desiresDiv = document.getElementById('desires');
                    desiresDiv.innerHTML = data.desires.map(desire => 
                        `<div class="desire-item">
                            <strong>${desire.name}</strong><br>
                            <small>–í–µ—Å: ${desire.weight.toFixed(2)}, –°—Ä–æ—á–Ω–æ—Å—Ç—å: ${desire.urgency.toFixed(2)}</small>
                        </div>`
                    ).join('');
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä
                if (data.character) {
                    const characterDiv = document.getElementById('character');
                    characterDiv.innerHTML = Object.entries(data.character.traits).map(([trait, value]) => 
                        `<div>
                            <strong>${trait}:</strong>
                            <div class="trait-bar">
                                <div class="trait-fill" style="width: ${value * 100}%"></div>
                            </div>
                            <small>${(value * 100).toFixed(0)}%</small>
                        </div>`
                    ).join('');
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º—ã—Å–ª–∏
                if (data.thoughts) {
                    const thoughtsDiv = document.getElementById('thoughts');
                    thoughtsDiv.innerHTML = data.thoughts.map(thought => 
                        `<div class="thought-item">
                            <small>${thought.timestamp}</small><br>
                            <strong>${thought.type}:</strong> ${thought.content.substring(0, 50)}...
                        </div>`
                    ).join('');
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏—è
                if (data.decisions) {
                    const decisionsDiv = document.getElementById('decisions');
                    decisionsDiv.innerHTML = data.decisions.map(decision => 
                        `<div class="decision-item">
                            <small>${decision.timestamp}</small><br>
                            <strong>${decision.action}</strong><br>
                            <small>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(decision.confidence * 100).toFixed(0)}%</small>
                        </div>`
                    ).join('');
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if (data.stats) {
                    const statsDiv = document.getElementById('stats');
                    statsDiv.innerHTML = `
                        <div><strong>–¶–∏–∫–ª–æ–≤:</strong> ${data.stats.cycle}</div>
                        <div><strong>–ú—ã—Å–ª–µ–π:</strong> ${data.stats.recent_thoughts}</div>
                        <div><strong>–†–µ—à–µ–Ω–∏–π:</strong> ${data.stats.recent_decisions}</div>
                        <div><strong>–ü–∞–º—è—Ç—å:</strong> ${data.stats.memory_size} –∑–∞–ø–∏—Å–µ–π</div>
                    `;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                if (data.system_state) {
                    const systemDiv = document.getElementById('system-state');
                    systemDiv.innerHTML = `
                        <div><strong>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</strong> ${data.system_state.temperature}¬∞C</div>
                        <div><strong>CPU:</strong> ${data.system_state.cpu_usage}%</div>
                        <div><strong>RAM:</strong> ${data.system_state.memory_usage}%</div>
                        <div><strong>–≠–º–æ—Ü–∏–∏:</strong> ${data.system_state.emotional_state}</div>
                    `;
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
                if (data.log) {
                    addLog(data.log.message, data.log.level);
                }
            }
            
            function addLog(message, level = 'info') {
                const logDiv = document.getElementById('log');
                const entry = document.createElement('div');
                entry.className = `log-entry log-${level}`;
                entry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
                logDiv.appendChild(entry);
                logDiv.scrollTop = logDiv.scrollHeight;
            }
            
            function startMonitoring() {
                if (ws && ws.readyState === WebSocket.OPEN) {
                    ws.send(JSON.stringify({action: 'start_monitoring'}));
                    addLog('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–Ω–∞–Ω–∏—è', 'info');
                }
            }
            
            function stopMonitoring() {
                if (ws && ws.readyState === WebSocket.OPEN) {
                    ws.send(JSON.stringify({action: 'stop_monitoring'}));
                    addLog('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞', 'warning');
                }
            }
            
            function clearLog() {
                document.getElementById('log').innerHTML = '';
                addLog('üóëÔ∏è –õ–æ–≥ –æ—á–∏—â–µ–Ω', 'info');
            }
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            connect();
        </script>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)


@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket endpoint –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await websocket.accept()
    connected_clients.append(websocket)
    
    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            message = json.loads(data)
            
            if message.get('action') == 'start_monitoring':
                await start_consciousness_monitoring(websocket)
            elif message.get('action') == 'stop_monitoring':
                await stop_consciousness_monitoring(websocket)
                
    except WebSocketDisconnect:
        connected_clients.remove(websocket)
        logger.info("–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è")


async def start_consciousness_monitoring(websocket: WebSocket):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–∑–Ω–∞–Ω–∏—è"""
    global monitoring_active
    monitoring_active = True
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await send_consciousness_update(websocket)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    while monitoring_active:
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª —Å–æ–∑–Ω–∞–Ω–∏—è
            result = await consciousness_core.consciousness_cycle_step()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            await send_consciousness_update(websocket, result)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            await asyncio.sleep(2)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await websocket.send_text(json.dumps({
                "log": {"message": f"–û—à–∏–±–∫–∞: {e}", "level": "error"}
            }))
            break


async def stop_consciousness_monitoring(websocket: WebSocket):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–∑–Ω–∞–Ω–∏—è"""
    global monitoring_active
    monitoring_active = False
    await websocket.send_text(json.dumps({
        "log": {"message": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "level": "warning"}
    }))


async def send_consciousness_update(websocket: WebSocket, cycle_result: Dict[str, Any] = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–Ω–∞–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        status = consciousness_core.get_consciousness_status()
        thoughts = consciousness_core.get_thoughts_summary()
        decisions = consciousness_core.get_decisions_summary()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        update_data = {
            "desires": [
                {
                    "name": desire.name,
                    "weight": desire.weight,
                    "urgency": desire.urgency,
                    "type": desire.type.value
                }
                for desire in consciousness_core.current_desires[:5]
            ],
            "character": status["character"],
            "thoughts": thoughts,
            "decisions": decisions,
            "stats": {
                "cycle": status["cycle"],
                "recent_thoughts": status["recent_thoughts"],
                "recent_decisions": status["recent_decisions"],
                "memory_size": status["memory_size"]
            },
            "system_state": status["self_state"]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ü–∏–∫–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if cycle_result:
            update_data["cycle_result"] = cycle_result
            update_data["log"] = {
                "message": f"–¶–∏–∫–ª {cycle_result['cycle']}: {cycle_result.get('primary_desire', '–ù–µ—Ç –∂–µ–ª–∞–Ω–∏–π')}",
                "level": "info"
            }
        
        await websocket.send_text(json.dumps(update_data))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")


@app.get("/api/consciousness/status")
async def get_consciousness_status():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–∑–Ω–∞–Ω–∏—è"""
    if not consciousness_core:
        return {"error": "Consciousness core not initialized"}
    
    status = consciousness_core.get_consciousness_status()
    return status


@app.get("/api/consciousness/thoughts")
async def get_thoughts():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º—ã—Å–ª–µ–π"""
    if not consciousness_core:
        return {"error": "Consciousness core not initialized"}
    
    thoughts = consciousness_core.get_thoughts_summary()
    return {"thoughts": thoughts}


@app.get("/api/consciousness/decisions")
async def get_decisions():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π"""
    if not consciousness_core:
        return {"error": "Consciousness core not initialized"}
    
    decisions = consciousness_core.get_decisions_summary()
    return {"decisions": decisions}


if __name__ == "__main__":
    print("üß† –ó–∞–ø—É—Å–∫ ARK Consciousness Monitor...")
    print("üìä –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8080")
    print("üîó WebSocket: ws://localhost:8080/ws")
    
    uvicorn.run(
        "consciousness_monitor:app",
        host="0.0.0.0",
        port=8080,
        reload=True
    ) 