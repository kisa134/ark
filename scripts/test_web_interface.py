#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ARK
"""

import requests
import json
import time
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API endpoints"""
    base_url = "http://localhost:8000"
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...")
    
    # –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å
    try:
        response = requests.get(f"{base_url}/api/status", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ /api/status: {data.get('status', 'unknown')}")
            print(f"   –°–æ–∑–Ω–∞–Ω–∏–µ: {data.get('consciousness_state', 'unknown')}")
            print(f"   –≠–º–æ—Ü–∏—è: {data.get('emotion_state', 'unknown')}")
        else:
            print(f"‚ùå /api/status: {response.status_code}")
    except Exception as e:
        print(f"‚ùå /api/status: {e}")
    
    # –¢–µ—Å—Ç 2: –°—Ç–∞—Ç—É—Å –º–æ–∑–≥–∞
    try:
        response = requests.get(f"{base_url}/api/brain/status", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ /api/brain/status: {data.get('status', 'unknown')}")
        else:
            print(f"‚ùå /api/brain/status: {response.status_code}")
    except Exception as e:
        print(f"‚ùå /api/brain/status: {e}")
    
    # –¢–µ—Å—Ç 3: –°—Ç–∞—Ç—É—Å —ç–≤–æ–ª—é—Ü–∏–∏
    try:
        response = requests.get(f"{base_url}/api/evolution_status", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ /api/evolution_status: {data.get('status', 'unknown')}")
        else:
            print(f"‚ùå /api/evolution_status: {response.status_code}")
    except Exception as e:
        print(f"‚ùå /api/evolution_status: {e}")
    
    # –¢–µ—Å—Ç 4: –°—Ç–∞—Ç—É—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    try:
        response = requests.get(f"{base_url}/api/tools_status", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ /api/tools_status: {len(data.get('tools', []))} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        else:
            print(f"‚ùå /api/tools_status: {response.status_code}")
    except Exception as e:
        print(f"‚ùå /api/tools_status: {e}")

def test_chat_functionality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞"""
    base_url = "http://localhost:8000"
    
    print("\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞...")
    
    # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
    try:
        import websockets
        import asyncio
        
        async def test_websocket():
            try:
                uri = "ws://localhost:8000/ws"
                async with websockets.connect(uri) as websocket:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = {
                        "type": "user_message",
                        "text": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                        "user_id": "test_user"
                    }
                    await websocket.send(json.dumps(message))
                    
                    # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
                    response = await asyncio.wait_for(websocket.recv(), timeout=10.0)
                    data = json.loads(response)
                    print(f"‚úÖ WebSocket —á–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('type', 'unknown')}")
                    
            except Exception as e:
                print(f"‚ùå WebSocket —á–∞—Ç: {e}")
        
        asyncio.run(test_websocket())
        
    except ImportError:
        print("‚ö†Ô∏è  websockets –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º WebSocket —Ç–µ—Å—Ç")
    except Exception as e:
        print(f"‚ùå WebSocket —Ç–µ—Å—Ç: {e}")

def test_html_interface():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    base_url = "http://localhost:8000"
    
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    try:
        response = requests.get(base_url, timeout=5)
        if response.status_code == 200:
            html = response.text
            if "ARK v2.8" in html:
                print("‚úÖ HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
            else:
                print("‚ö†Ô∏è  HTML –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        else:
            print(f"‚ùå HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {response.status_code}")
    except Exception as e:
        print(f"‚ùå HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {e}")

def test_agent_communication():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–Ω–∏—è —Å –∞–≥–µ–Ω—Ç–æ–º"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–Ω–∏—è —Å –∞–≥–µ–Ω—Ç–æ–º...")
    
    try:
        from mind.cognitive_architecture import cognitive_brain
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        test_message = "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ"
        print(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {test_message}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        result = cognitive_brain.process_user_input(test_message)
        
        if result:
            print(f"‚úÖ –ê–≥–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª: {result.get('confidence', 0):.2f} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
            print(f"   –†–µ—à–µ–Ω–∏–µ: {result.get('decision', '–ù–µ—Ç —Ä–µ—à–µ–Ω–∏—è')[:100]}...")
        else:
            print("‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")
            
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ARK v2.8")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
    try:
        response = requests.get("http://localhost:8000/api/status", timeout=2)
        if response.status_code == 200:
            print("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        else:
            print("‚ùå –í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return
    except:
        print("‚ùå –í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python web/chat_server.py")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_api_endpoints()
    test_html_interface()
    test_chat_functionality()
    test_agent_communication()
    
    print("\n" + "=" * 50)
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main() 