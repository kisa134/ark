#!/usr/bin/env python3
"""
ARK v2.8 - Ubuntu Desktop Application
–î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –≥–ª—É–±–æ–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Ubuntu
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
import time
import json
import sys
from pathlib import Path
import subprocess
import psutil
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from mind.cognitive_architecture import cognitive_brain
from mind.advanced_consciousness import AdvancedConsciousnessModel
from evaluation.auto_reporter import auto_reporter
from system_integration.ark_ubuntu_integration import ARKUbuntuIntegration

class ARKUbuntuDesktopApp:
    def __init__(self, root):
        self.root = root
        self.root.title("ARK v2.8 - Ubuntu Integration")
        self.root.geometry("1400x900")
        self.root.configure(bg='#2b2b2b')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.cognitive_brain = cognitive_brain
        self.consciousness = AdvancedConsciousnessModel()
        self.auto_reporter = auto_reporter
        self.ubuntu_integration = ARKUbuntuIntegration()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        self.agent_active = True
        self.monitoring_active = False
        
        self.setup_ui()
        self.start_monitoring()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self.root, bg='#2b2b2b')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = tk.Frame(main_frame, bg='#2b2b2b')
        header_frame.pack(fill=tk.X, pady=(0, 10))
        
        title_label = tk.Label(
            header_frame,
            text="üß† ARK v2.8 - Ubuntu Integration",
            font=("Arial", 16, "bold"),
            fg='#00ff00',
            bg='#2b2b2b'
        )
        title_label.pack()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        notebook = ttk.Notebook(main_frame)
        notebook.pack(fill=tk.BOTH, expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ —á–∞—Ç–∞
        self.setup_chat_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        self.setup_system_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.setup_monitoring_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.setup_security_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.setup_management_tab(notebook)
    
    def setup_chat_tab(self, notebook):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —á–∞—Ç–∞"""
        chat_frame = tk.Frame(notebook, bg='#2b2b2b')
        notebook.add(chat_frame, text="üí¨ –ß–∞—Ç")
        
        # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        chat_display_frame = tk.Frame(chat_frame, bg='#2b2b2b')
        chat_display_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        self.chat_display = scrolledtext.ScrolledText(
            chat_display_frame,
            bg='#1e1e1e',
            fg='#ffffff',
            font=("Consolas", 10),
            wrap=tk.WORD
        )
        self.chat_display.pack(fill=tk.BOTH, expand=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Ü–≤–µ—Ç–æ–≤
        self.chat_display.tag_configure("user", foreground="#00ff00")
        self.chat_display.tag_configure("agent", foreground="#0088ff")
        self.chat_display.tag_configure("system", foreground="#ff8800")
        self.chat_display.tag_configure("error", foreground="#ff0000")
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        input_frame = tk.Frame(chat_frame, bg='#2b2b2b')
        input_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        self.message_entry = tk.Entry(
            input_frame,
            bg='#1e1e1e',
            fg='#ffffff',
            font=("Arial", 12),
            insertbackground='#ffffff'
        )
        self.message_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        self.message_entry.bind("<Return>", lambda e: self.send_message())
        
        send_button = tk.Button(
            input_frame,
            text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
            command=self.send_message,
            bg='#0088ff',
            fg='#ffffff',
            font=("Arial", 10, "bold")
        )
        send_button.pack(side=tk.RIGHT, padx=(10, 0))
        
        # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
        commands_frame = tk.Frame(chat_frame, bg='#2b2b2b')
        commands_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        commands = [
            ("–°–∏—Å—Ç–µ–º–∞", "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"),
            ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"),
            ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–ü—Ä–æ–≤–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"),
            ("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —Å–∏—Å—Ç–µ–º—É"),
            ("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è", "–ü—Ä–æ–≤–µ—Ä—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        ]
        
        for i, (label, command) in enumerate(commands):
            btn = tk.Button(
                commands_frame,
                text=label,
                command=lambda cmd=command: self.quick_command(cmd),
                bg='#444444',
                fg='#ffffff',
                font=("Arial", 9)
            )
            btn.pack(side=tk.LEFT, padx=(0, 5))
    
    def setup_system_tab(self, notebook):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        system_frame = tk.Frame(notebook, bg='#2b2b2b')
        notebook.add(system_frame, text="üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
        system_notebook = ttk.Notebook(system_frame)
        system_notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã
        overview_frame = tk.Frame(system_notebook, bg='#2b2b2b')
        system_notebook.add(overview_frame, text="–û–±–∑–æ—Ä")
        
        self.system_text = scrolledtext.ScrolledText(
            overview_frame,
            bg='#1e1e1e',
            fg='#ffffff',
            font=("Consolas", 9)
        )
        self.system_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ü—Ä–æ—Ü–µ—Å—Å—ã
        processes_frame = tk.Frame(system_notebook, bg='#2b2b2b')
        system_notebook.add(processes_frame, text="–ü—Ä–æ—Ü–µ—Å—Å—ã")
        
        self.processes_text = scrolledtext.ScrolledText(
            processes_frame,
            bg='#1e1e1e',
            fg='#ffffff',
            font=("Consolas", 9)
        )
        self.processes_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –°–ª—É–∂–±—ã
        services_frame = tk.Frame(system_notebook, bg='#2b2b2b')
        system_notebook.add(services_frame, text="–°–ª—É–∂–±—ã")
        
        self.services_text = scrolledtext.ScrolledText(
            services_frame,
            bg='#1e1e1e',
            fg='#ffffff',
            font=("Consolas", 9)
        )
        self.services_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
    
    def setup_monitoring_tab(self, notebook):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        monitoring_frame = tk.Frame(notebook, bg='#2b2b2b')
        notebook.add(monitoring_frame, text="üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
        control_frame = tk.Frame(monitoring_frame, bg='#2b2b2b')
        control_frame.pack(fill=tk.X, padx=10, pady=10)
        
        self.start_monitoring_btn = tk.Button(
            control_frame,
            text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
            command=self.start_monitoring,
            bg='#00aa00',
            fg='#ffffff',
            font=("Arial", 10, "bold")
        )
        self.start_monitoring_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stop_monitoring_btn = tk.Button(
            control_frame,
            text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
            command=self.stop_monitoring,
            bg='#aa0000',
            fg='#ffffff',
            font=("Arial", 10, "bold")
        )
        self.stop_monitoring_btn.pack(side=tk.LEFT)
        
        # –û–±–ª–∞—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitoring_text = scrolledtext.ScrolledText(
            monitoring_frame,
            bg='#1e1e1e',
            fg='#ffffff',
            font=("Consolas", 9)
        )
        self.monitoring_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
    
    def setup_security_tab(self, notebook):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        security_frame = tk.Frame(notebook, bg='#2b2b2b')
        notebook.add(security_frame, text="üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_notebook = ttk.Notebook(security_frame)
        security_notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –û–±–∑–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        sec_overview_frame = tk.Frame(security_notebook, bg='#2b2b2b')
        security_notebook.add(sec_overview_frame, text="–û–±–∑–æ—Ä")
        
        self.security_text = scrolledtext.ScrolledText(
            sec_overview_frame,
            bg='#1e1e1e',
            fg='#ffffff',
            font=("Consolas", 9)
        )
        self.security_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –§–∞–π—Ä–≤–æ–ª
        firewall_frame = tk.Frame(security_notebook, bg='#2b2b2b')
        security_notebook.add(firewall_frame, text="–§–∞–π—Ä–≤–æ–ª")
        
        self.firewall_text = scrolledtext.ScrolledText(
            firewall_frame,
            bg='#1e1e1e',
            fg='#ffffff',
            font=("Consolas", 9)
        )
        self.firewall_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –£—è–∑–≤–∏–º–æ—Å—Ç–∏
        vuln_frame = tk.Frame(security_notebook, bg='#2b2b2b')
        security_notebook.add(vuln_frame, text="–£—è–∑–≤–∏–º–æ—Å—Ç–∏")
        
        self.vulnerabilities_text = scrolledtext.ScrolledText(
            vuln_frame,
            bg='#1e1e1e',
            fg='#ffffff',
            font=("Consolas", 9)
        )
        self.vulnerabilities_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
    
    def setup_management_tab(self, notebook):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        management_frame = tk.Frame(notebook, bg='#2b2b2b')
        notebook.add(management_frame, text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(management_frame, bg='#2b2b2b')
        buttons_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        system_buttons = [
            ("–û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É", self.update_system),
            ("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å", self.optimize_system),
            ("–ê–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è", self.analyze_health),
            ("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", self.backup_system),
            ("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", self.get_recommendations)
        ]
        
        for i, (text, command) in enumerate(system_buttons):
            btn = tk.Button(
                buttons_frame,
                text=text,
                command=command,
                bg='#444444',
                fg='#ffffff',
                font=("Arial", 10),
                width=15
            )
            btn.grid(row=i//3, column=i%3, padx=5, pady=5)
        
        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥
        self.management_text = scrolledtext.ScrolledText(
            management_frame,
            bg='#1e1e1e',
            fg='#ffffff',
            font=("Consolas", 9)
        )
        self.management_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
    
    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É"""
        message = self.message_entry.get().strip()
        if not message:
            return
        
        # –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.message_entry.delete(0, tk.END)
        
        # –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
        self.chat_display.insert(tk.END, f"\nüë§ –í—ã: {message}\n", "user")
        self.chat_display.see(tk.END)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self._process_message, args=(message,), daemon=True).start()
    
    def _process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
            import asyncio
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                result = loop.run_until_complete(self.cognitive_brain.process_input(message))
                loop.close()
            except Exception as e:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")
                result = None
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            if "—Å–∏—Å—Ç–µ–º–∞" in message.lower():
                response = self._get_system_response()
            elif "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" in message.lower():
                response = self._get_performance_response()
            elif "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å" in message.lower():
                response = self._get_security_response()
            elif "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è" in message.lower():
                response = self._get_optimization_response()
            else:
                response = f"ü§ñ ARK: –û–±—Ä–∞–±–æ—Ç–∞–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message}'. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Å–∏—Å—Ç–µ–º–æ–π Ubuntu?"
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.root.after(0, lambda: self._update_chat(response, "agent"))
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}"
            self.root.after(0, lambda: self._update_chat(error_msg, "error"))
    
    def _get_system_response(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            status = self.ubuntu_integration.get_full_system_status()
            if "error" not in status:
                system_info = status.get("system_overview", {}).get("os_info", {})
                return f"ü§ñ ARK: –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã Ubuntu\n" \
                       f"–î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤: {system_info.get('distribution', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n" \
                       f"–í–µ—Ä—Å–∏—è: {system_info.get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n" \
                       f"–Ø–¥—Ä–æ: {system_info.get('kernel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n" \
                       f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {system_info.get('uptime', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            else:
                return f"ü§ñ ARK: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {status['error']}"
        except Exception as e:
            return f"ü§ñ ARK: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º—ã: {e}"
    
    def _get_performance_response(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            metrics = self.ubuntu_integration.system_controller.get_performance_metrics()
            if "error" not in metrics:
                cpu = metrics.get("cpu_usage", 0)
                memory = metrics.get("memory_usage", {}).get("percent", 0)
                return f"ü§ñ ARK: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n" \
                       f"CPU: {cpu}%\n" \
                       f"–ü–∞–º—è—Ç—å: {memory}%\n" \
                       f"–î–∏—Å–∫: {metrics.get('disk_usage', {}).get('percent', 0)}%"
            else:
                return f"ü§ñ ARK: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {metrics['error']}"
        except Exception as e:
            return f"ü§ñ ARK: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}"
    
    def _get_security_response(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            security = self.ubuntu_integration.network_security.get_security_overview()
            if "error" not in security:
                firewall = security.get("firewall", {})
                vulnerabilities = len(security.get("vulnerabilities", []))
                return f"ü§ñ ARK: –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n" \
                       f"–§–∞–π—Ä–≤–æ–ª: {'–ê–∫—Ç–∏–≤–µ–Ω' if firewall.get('ufw', {}).get('enabled') else '–û—Ç–∫–ª—é—á–µ–Ω'}\n" \
                       f"–£—è–∑–≤–∏–º–æ—Å—Ç–∏: {vulnerabilities}\n" \
                       f"–ê–Ω—Ç–∏–≤–∏—Ä—É—Å: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if security.get('antivirus', {}).get('clamav', {}).get('installed') else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
            else:
                return f"ü§ñ ARK: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security['error']}"
        except Exception as e:
            return f"ü§ñ ARK: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}"
    
    def _get_optimization_response(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            result = self.ubuntu_integration.optimize_system()
            if result.get("success"):
                optimizations = result.get("optimizations", [])
                return f"ü§ñ ARK: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n" \
                       f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {len(optimizations)}\n" \
                       f"–î–µ–π—Å—Ç–≤–∏—è: {', '.join(optimizations)}"
            else:
                return f"ü§ñ ARK: –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        except Exception as e:
            return f"ü§ñ ARK: –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}"
    
    def _update_chat(self, message, tag="agent"):
        """–û–±–Ω–æ–≤–∏—Ç—å —á–∞—Ç"""
        self.chat_display.insert(tk.END, f"\n{message}\n", tag)
        self.chat_display.see(tk.END)
    
    def quick_command(self, command):
        """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞"""
        self.message_entry.delete(0, tk.END)
        self.message_entry.insert(0, command)
        self.send_message()
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        if not self.monitoring_active:
            result = self.ubuntu_integration.start_monitoring()
            if result.get("success"):
                self.monitoring_active = True
                self.start_monitoring_btn.config(state=tk.DISABLED)
                self.stop_monitoring_btn.config(state=tk.NORMAL)
                self._update_monitoring_display("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω...")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {result.get('error')}")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        if self.monitoring_active:
            result = self.ubuntu_integration.stop_monitoring()
            if result.get("success"):
                self.monitoring_active = False
                self.start_monitoring_btn.config(state=tk.NORMAL)
                self.stop_monitoring_btn.config(state=tk.DISABLED)
                self._update_monitoring_display("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {result.get('error')}")
    
    def _update_monitoring_display(self, message):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring_text.insert(tk.END, f"{time.strftime('%H:%M:%S')} - {message}\n")
        self.monitoring_text.see(tk.END)
    
    def update_system(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"""
        def update_thread():
            result = self.ubuntu_integration.update_system()
            if result.get("success"):
                self.root.after(0, lambda: self._update_management_display("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"))
            else:
                self.root.after(0, lambda: self._update_management_display(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {result.get('error')}"))
        
        threading.Thread(target=update_thread, daemon=True).start()
    
    def optimize_system(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É"""
        def optimize_thread():
            result = self.ubuntu_integration.optimize_system()
            if result.get("success"):
                optimizations = result.get("optimizations", [])
                self.root.after(0, lambda: self._update_management_display(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {', '.join(optimizations)}"))
            else:
                self.root.after(0, lambda: self._update_management_display(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {result.get('error')}"))
        
        threading.Thread(target=optimize_thread, daemon=True).start()
    
    def analyze_health(self):
        """–ê–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        def analyze_thread():
            health = self.ubuntu_integration.analyze_system_health()
            if "error" not in health:
                status = health.get("overall_health", "unknown")
                issues = len(health.get("issues", []))
                self.root.after(0, lambda: self._update_management_display(f"üè• –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: {status}, –ü—Ä–æ–±–ª–µ–º: {issues}"))
            else:
                self.root.after(0, lambda: self._update_management_display(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {health.get('error')}"))
        
        threading.Thread(target=analyze_thread, daemon=True).start()
    
    def backup_system(self):
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
        def backup_thread():
            result = self.ubuntu_integration.backup_system_config()
            if result.get("success"):
                self.root.after(0, lambda: self._update_management_display(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {result.get('backup_path')}"))
            else:
                self.root.after(0, lambda: self._update_management_display(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {result.get('error')}"))
        
        threading.Thread(target=backup_thread, daemon=True).start()
    
    def get_recommendations(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        def recommendations_thread():
            recommendations = self.ubuntu_integration.get_system_recommendations()
            if "error" not in recommendations:
                total = recommendations.get("total", 0)
                critical = recommendations.get("critical", 0)
                self.root.after(0, lambda: self._update_management_display(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {total}, –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {critical}"))
            else:
                self.root.after(0, lambda: self._update_management_display(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {recommendations.get('error')}"))
        
        threading.Thread(target=recommendations_thread, daemon=True).start()
    
    def _update_management_display(self, message):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        self.management_text.insert(tk.END, f"{time.strftime('%H:%M:%S')} - {message}\n")
        self.management_text.see(tk.END)
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        def monitoring_loop():
            while self.agent_active:
                try:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    status = self.ubuntu_integration.get_full_system_status()
                    if "error" not in status:
                        system_info = status.get("system_overview", {}).get("os_info", {})
                        self.root.after(0, lambda: self._update_system_display(system_info))
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                    processes = self.ubuntu_integration.system_controller.get_process_info()
                    if "error" not in processes:
                        self.root.after(0, lambda: self._update_processes_display(processes))
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª—É–∂–±
                    services = self.ubuntu_integration.systemd_integration.get_running_services()
                    self.root.after(0, lambda: self._update_services_display(services))
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    security = self.ubuntu_integration.network_security.get_security_overview()
                    if "error" not in security:
                        self.root.after(0, lambda: self._update_security_display(security))
                    
                    time.sleep(10)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    time.sleep(10)
        
        threading.Thread(target=monitoring_loop, daemon=True).start()
    
    def _update_system_display(self, system_info):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        self.system_text.delete(1.0, tk.END)
        info_text = f"–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        for key, value in system_info.items():
            info_text += f"{key}: {value}\n"
        self.system_text.insert(tk.END, info_text)
    
    def _update_processes_display(self, processes):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        self.processes_text.delete(1.0, tk.END)
        processes_text = f"–ü—Ä–æ—Ü–µ—Å—Å—ã (–≤—Å–µ–≥–æ: {processes.get('total_processes', 0)}):\n"
        top_processes = processes.get("top_processes", [])
        for proc in top_processes[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø 20
            processes_text += f"{proc.get('name', 'Unknown')}: {proc.get('cpu_percent', 0)}% CPU\n"
        self.processes_text.insert(tk.END, processes_text)
    
    def _update_services_display(self, services):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª—É–∂–±"""
        self.services_text.delete(1.0, tk.END)
        services_text = f"–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã (–≤—Å–µ–≥–æ: {len(services)}):\n"
        for service in services[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø 20
            services_text += f"{service.get('service_name', 'Unknown')}: {service.get('active_state', 'Unknown')}\n"
        self.services_text.insert(tk.END, services_text)
    
    def _update_security_display(self, security):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.security_text.delete(1.0, tk.END)
        security_text = f"–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:\n"
        
        firewall = security.get("firewall", {})
        security_text += f"–§–∞–π—Ä–≤–æ–ª: {'–ê–∫—Ç–∏–≤–µ–Ω' if firewall.get('ufw', {}).get('enabled') else '–û—Ç–∫–ª—é—á–µ–Ω'}\n"
        
        vulnerabilities = security.get("vulnerabilities", [])
        security_text += f"–£—è–∑–≤–∏–º–æ—Å—Ç–∏: {len(vulnerabilities)}\n"
        
        antivirus = security.get("antivirus", {})
        security_text += f"–ê–Ω—Ç–∏–≤–∏—Ä—É—Å: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if antivirus.get('clamav', {}).get('installed') else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        
        self.security_text.insert(tk.END, security_text)
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.agent_active = False
        if self.monitoring_active:
            self.ubuntu_integration.stop_monitoring()
        self.root.destroy()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    root = tk.Tk()
    app = ARKUbuntuDesktopApp(root)
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    root.mainloop()

if __name__ == "__main__":
    main() 