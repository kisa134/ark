#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ–±—â–µ–Ω–∏—è —Å –∞–≥–µ–Ω—Ç–æ–º ARK
"""

import requests
import json
import time
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

def test_chat_with_agent():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–Ω–∏—è —Å –∞–≥–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ WebSocket"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–Ω–∏—è —Å –∞–≥–µ–Ω—Ç–æ–º ARK")
    print("=" * 50)
    
    try:
        import websockets
        import asyncio
        
        async def chat_test():
            uri = "ws://localhost:8000/ws"
            
            try:
                async with websockets.connect(uri) as websocket:
                    print("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ WebSocket")
                    
                    # –ñ–¥–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    initial_state = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                    print("üìä –ü–æ–ª—É—á–∏–ª–∏ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    test_messages = [
                        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                        "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ",
                        "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å –¥–µ–ª–∞—Ç—å?",
                        "–ü–æ–∫–∞–∂–∏ —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
                    ]
                    
                    for i, message in enumerate(test_messages, 1):
                        print(f"\nüìù –¢–µ—Å—Ç {i}: {message}")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        chat_message = {
                            "type": "user_message",
                            "text": message,
                            "user_id": "test_user"
                        }
                        await websocket.send(json.dumps(chat_message))
                        
                        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
                        try:
                            response = await asyncio.wait_for(websocket.recv(), timeout=15.0)
                            data = json.loads(response)
                            
                            if data.get("type") == "agent_response":
                                print(f"‚úÖ –ê–≥–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª: {data.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')[:100]}...")
                            elif data.get("type") == "agent_state":
                                print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data.get('consciousness_state', 'unknown')}")
                            else:
                                print(f"üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Ç–∏–ø–∞: {data.get('type', 'unknown')}")
                                
                        except asyncio.TimeoutError:
                            print("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
                        
                        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        await asyncio.sleep(2)
                    
                    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
        
        asyncio.run(chat_test())
        
    except ImportError:
        print("‚ùå websockets –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install websockets")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_api_communication():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"""
    print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏")
    print("=" * 30)
    
    base_url = "http://localhost:8000"
    
    # –¢–µ—Å—Ç 1: –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
    try:
        response = requests.get(f"{base_url}/api/status")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞: {data.get('status', 'unknown')}")
            print(f"   –°–æ–∑–Ω–∞–Ω–∏–µ: {data.get('consciousness_state', 'unknown')}")
            print(f"   –≠–º–æ—Ü–∏—è: {data.get('emotion_state', 'unknown')}")
        else:
            print(f"‚ùå –°—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
    try:
        response = requests.get(f"{base_url}/api/chat_history")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞: {len(data.get('messages', []))} —Å–æ–æ–±—â–µ–Ω–∏–π")
        else:
            print(f"‚ùå –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    # –¢–µ—Å—Ç 3: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    try:
        response = requests.get(f"{base_url}/api/tools_status")
        if response.status_code == 200:
            data = response.json()
            tools = data.get('tools', [])
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools)}")
            for tool in tools[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   - {tool.get('name', 'Unknown')}")
        else:
            print(f"‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß† –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç ARK v2.8")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
    try:
        response = requests.get("http://localhost:8000/api/status", timeout=2)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return
    except:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python web/chat_server.py")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_api_communication()
    test_chat_with_agent()
    
    print("\n" + "=" * 50)
    print("üéØ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    main() 