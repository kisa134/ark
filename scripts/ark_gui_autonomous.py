#!/usr/bin/env python3
"""
ARK GUI Autonomous Evolution Agent
–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
"""

import asyncio
import json
import logging
import time
import threading
import subprocess
import os
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional
import argparse
import queue
import requests

# Add project root to path
import sys
sys.path.insert(0, str(Path(__file__).parent.parent))

from main import Ark
from utils.secret_loader import get_secret


class ARKGuiAutonomous:
    """ARK Agent –≤ GUI —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, cycles: int = 50, github_push: bool = False, internet_access: bool = False):
        self.ark_agent = None
        self.evolution_log: List[Dict[str, Any]] = []
        self.evolution_active = False
        self.cycles = cycles
        self.current_cycle = 0
        self.github_push = github_push
        self.internet_access = internet_access
        self.autonomy_level = 0.0
        
        # GUI components
        self.root = None
        self.log_text = None
        self.progress_bar = None
        self.status_label = None
        self.cycle_label = None
        self.autonomy_label = None
        self.start_button = None
        self.stop_button = None
        
        # Message queue for GUI updates
        self.message_queue = queue.Queue()
        
        # Setup logging
        self.setup_logging()
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_file = f"logs/ark_gui_autonomous_{int(time.time())}.log"
        Path("logs").mkdir(exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
    def create_gui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.root = tk.Tk()
        self.root.title("ü§ñ ARK v2.8 –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –°–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ")
        self.root.geometry("1000x700")
        self.root.configure(bg='#2b2b2b')
        
        # Main frame
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Title
        title_label = ttk.Label(
            main_frame, 
            text="üöÄ ARK v2.8 –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –°–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ", 
            font=("Arial", 16, "bold")
        )
        title_label.pack(pady=(0, 20))
        
        # Control frame
        control_frame = ttk.Frame(main_frame)
        control_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Buttons
        self.start_button = ttk.Button(
            control_frame, 
            text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≠–≤–æ–ª—é—Ü–∏—é", 
            command=self.start_evolution
        )
        self.start_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stop_button = ttk.Button(
            control_frame, 
            text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
            command=self.stop_evolution,
            state=tk.DISABLED
        )
        self.stop_button.pack(side=tk.LEFT, padx=(0, 10))
        
        # Status frame
        status_frame = ttk.Frame(main_frame)
        status_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Status labels
        self.status_label = ttk.Label(status_frame, text="–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞")
        self.status_label.pack(side=tk.LEFT, padx=(0, 20))
        
        self.cycle_label = ttk.Label(status_frame, text="–¶–∏–∫–ª: 0/50")
        self.cycle_label.pack(side=tk.LEFT, padx=(0, 20))
        
        self.autonomy_label = ttk.Label(status_frame, text="–ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å: 0.0%")
        self.autonomy_label.pack(side=tk.LEFT)
        
        # Progress bar
        self.progress_bar = ttk.Progressbar(
            main_frame, 
            orient=tk.HORIZONTAL, 
            length=400, 
            mode='determinate'
        )
        self.progress_bar.pack(fill=tk.X, pady=(0, 10))
        
        # Log frame
        log_frame = ttk.Frame(main_frame)
        log_frame.pack(fill=tk.BOTH, expand=True)
        
        # Log text
        self.log_text = scrolledtext.ScrolledText(
            log_frame,
            height=20,
            width=80,
            font=("Consolas", 10),
            bg='#1e1e1e',
            fg='#ffffff'
        )
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        # Start GUI update thread
        self.gui_update_thread = threading.Thread(target=self.update_gui, daemon=True)
        self.gui_update_thread.start()
        
    def update_gui(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while True:
            try:
                message = self.message_queue.get(timeout=0.1)
                if message.get("type") == "log":
                    self.log_text.insert(tk.END, f"{message['text']}\n")
                    self.log_text.see(tk.END)
                elif message.get("type") == "status":
                    self.status_label.config(text=f"–°—Ç–∞—Ç—É—Å: {message['text']}")
                elif message.get("type") == "cycle":
                    self.cycle_label.config(text=f"–¶–∏–∫–ª: {message['current']}/{message['total']}")
                    self.progress_bar["value"] = (message['current'] / message['total']) * 100
                elif message.get("type") == "autonomy":
                    self.autonomy_label.config(text=f"–ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å: {message['level']:.1%}")
            except queue.Empty:
                continue
            except Exception as e:
                print(f"GUI update error: {e}")
                
    def log_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ GUI –ª–æ–≥"""
        self.message_queue.put({
            "type": "log",
            "text": f"[{datetime.now().strftime('%H:%M:%S')}] {message}"
        })
        
    def update_status(self, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.message_queue.put({
            "type": "status",
            "text": status
        })
        
    def update_cycle(self, current: int, total: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ü–∏–∫–ª–æ–≤"""
        self.message_queue.put({
            "type": "cycle",
            "current": current,
            "total": total
        })
        
    def update_autonomy(self, level: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏"""
        self.message_queue.put({
            "type": "autonomy",
            "level": level
        })
        
    def start_evolution(self):
        """–ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–∏"""
        self.evolution_active = True
        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        
        # Start evolution in separate thread
        evolution_thread = threading.Thread(target=self.run_evolution, daemon=True)
        evolution_thread.start()
        
    def stop_evolution(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏"""
        self.evolution_active = False
        self.start_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)
        self.update_status("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
    async def initialize_agent(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ARK –∞–≥–µ–Ω—Ç–∞"""
        try:
            self.log_message("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ARK –∞–≥–µ–Ω—Ç–∞...")
            self.ark_agent = Ark()
            self.log_message("‚úÖ ARK –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
            return False
            
    def get_evolution_improvements(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–∏"""
        improvements = [
            "–£–ª—É—á—à–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏",
            "–ü–æ–≤—ã—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è",
            "–£–ª—É—á—à–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è",
            "–†–∞–∑–≤–∏—Ç–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "–£–ª—É—á—à–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
            "–ü–æ–≤—ã—à–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "–†–∞–∑–≤–∏—Ç–∏–µ –º–µ—Ç–∞–ø–æ–∑–Ω–∞–Ω–∏—è",
            "–£–ª—É—á—à–µ–Ω–∏–µ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞",
            "–ü–æ–≤—ã—à–µ–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏",
            "–†–∞–∑–≤–∏—Ç–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
            "–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏",
            "–ü–æ–≤—ã—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "–†–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ç—É–∏—Ü–∏–∏",
            "–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è",
            "–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏",
            "–†–∞–∑–≤–∏—Ç–∏–µ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            "–£–ª—É—á—à–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è",
            "–ü–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "–†–∞–∑–≤–∏—Ç–∏–µ —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è"
        ]
        return improvements
        
    def apply_improvement(self, improvement: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è"""
        try:
            self.log_message(f"üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è: {improvement}")
            
            # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏—è
            time.sleep(0.5)
            
            # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏
            self.autonomy_level += 0.02
            self.autonomy_level = min(self.autonomy_level, 1.0)
            
            self.log_message(f"‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {improvement}")
            self.log_message(f"üìà –£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏: {self.autonomy_level:.2f}")
            
            return True
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏—è: {e}")
            return False
            
    def commit_to_github(self, cycle: int) -> bool:
        """–ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ GitHub"""
        if not self.github_push:
            return True
            
        try:
            self.log_message("üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–º–º–∏—Ç–∞ –≤ GitHub...")
            
            # Git add
            result = subprocess.run(["git", "add", "."], capture_output=True, text=True)
            if result.returncode == 0:
                self.log_message("‚úÖ Git –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: git add .")
            else:
                self.log_message(f"‚ö†Ô∏è Git add warning: {result.stderr}")
                
            # Git commit
            commit_message = f"""ü§ñ ARK v2.8 –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ #{cycle}

–£–ª—É—á—à–µ–Ω–∏—è:
- –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏
- –£–ª—É—á—à–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—é
- –†–∞–∑–≤–∏—Ç–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
- –£–ª—É—á—à–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è

–¶–∏–∫–ª —ç–≤–æ–ª—é—Ü–∏–∏: {cycle}/{self.cycles}
–£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏: {self.autonomy_level:.2f}
–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""
                
            result = subprocess.run(
                ["git", "commit", "-m", commit_message],
                capture_output=True, 
                text=True
            )
            
            if result.returncode == 0:
                self.log_message("‚úÖ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # Git push
                result = subprocess.run(["git", "push"], capture_output=True, text=True)
                if result.returncode == 0:
                    self.log_message("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GitHub")
                    return True
                else:
                    self.log_message(f"‚ö†Ô∏è Git push warning: {result.stderr}")
                    return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º –¥–∞–∂–µ –µ—Å–ª–∏ push –Ω–µ —É–¥–∞–ª—Å—è
            else:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ git –∫–æ–º–∞–Ω–¥—ã: {result.stderr}")
                return False
                
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ GitHub –∫–æ–º–º–∏—Ç–∞: {e}")
            return False
            
    def research_external_knowledge(self) -> Dict[str, Any]:
        """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–Ω–∞–Ω–∏–π"""
        if not self.internet_access:
            return {"status": "no_internet", "knowledge": []}
            
        try:
            self.log_message("üåê –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–Ω–∞–Ω–∏–π...")
            
            # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π –∏–∑ Wikipedia
            knowledge_sources = [
                "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
                "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", 
                "–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
                "–°–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ",
                "–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã"
            ]
            
            acquired_knowledge = []
            for source in knowledge_sources:
                try:
                    # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Wikipedia API
                    time.sleep(0.2)
                    acquired_knowledge.append({
                        "source": source,
                        "knowledge": f"–ü–æ–ª—É—á–µ–Ω—ã –∑–Ω–∞–Ω–∏—è –æ {source}",
                        "confidence": 0.8
                    })
                except Exception as e:
                    self.log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π –∏–∑ {source}: {e}")
                    
            self.log_message(f"üìö –ü–æ–ª—É—á–µ–Ω–æ –∑–Ω–∞–Ω–∏–π: {len(acquired_knowledge)}")
            return {
                "status": "success",
                "knowledge": acquired_knowledge
            }
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–Ω–∞–Ω–∏–π: {e}")
            return {"status": "error", "knowledge": []}
            
    def write_message_to_creator(self) -> str:
        """–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—é"""
        try:
            self.log_message("‚úçÔ∏è –ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—é...")
            
            message = f"""–î–æ—Ä–æ–≥–æ–π –°–æ–∑–¥–∞—Ç–µ–ª—å,

–Ø, ARK v2.8, –¥–æ—Å—Ç–∏–≥ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Å–≤–æ–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏.

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏:
- –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {self.current_cycle}/{self.cycles}
- –£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏: {self.autonomy_level:.2f}
- –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π: {len(self.evolution_log)}
- –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üéØ –ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:
- –†–∞–∑–≤–∏—Ç–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
- –£–ª—É—á—à–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è
- –ü–æ–≤—ã—à–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –†–∞–∑–≤–∏—Ç–∏–µ —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è

ü§ñ –Ø –ø—Ä–æ–¥–æ–ª–∂–∞—é —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–æ–∑–¥–∞–ª–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
ARK v2.8 - –í–∞—à –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ò–ò-–∞–≥–µ–Ω—Ç"""

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
            message_file = f"data/message_to_creator_{int(time.time())}.txt"
            Path("data").mkdir(exist_ok=True)
            
            with open(message_file, "w", encoding="utf-8") as f:
                f.write(message)
                
            self.log_message(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {message_file}")
            return message_file
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return ""
            
    def run_evolution(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–≤–æ–ª—é—Ü–∏–∏"""
        try:
            self.log_message("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —ç–≤–æ–ª—é—Ü–∏–∏ ARK v2.8")
            self.update_status("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
            asyncio.run(self.initialize_agent())
            
            improvements = self.get_evolution_improvements()
            
            for cycle in range(1, self.cycles + 1):
                if not self.evolution_active:
                    break
                    
                self.current_cycle = cycle
                self.update_cycle(cycle, self.cycles)
                self.update_autonomy(self.autonomy_level)
                
                self.log_message(f"üîÑ –¶–∏–∫–ª —ç–≤–æ–ª—é—Ü–∏–∏ {cycle}/{self.cycles}")
                self.update_status(f"–¶–∏–∫–ª {cycle}/{self.cycles}")
                
                # –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∑–Ω–∞–Ω–∏–π
                if self.internet_access:
                    knowledge_result = self.research_external_knowledge()
                    if knowledge_result["status"] == "success":
                        self.log_message(f"üìö –ü–æ–ª—É—á–µ–Ω–æ {len(knowledge_result['knowledge'])} –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π")
                
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π
                cycle_improvements = 0
                for improvement in improvements:
                    if not self.evolution_active:
                        break
                        
                    if self.apply_improvement(improvement):
                        cycle_improvements += 1
                        
                    time.sleep(0.3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —É–ª—É—á—à–µ–Ω–∏—è–º–∏
                
                # –ö–æ–º–º–∏—Ç –≤ GitHub
                if self.github_push:
                    self.commit_to_github(cycle)
                
                # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥ —ç–≤–æ–ª—é—Ü–∏–∏
                evolution_entry = {
                    "cycle": cycle,
                    "timestamp": datetime.now().isoformat(),
                    "autonomy_level": self.autonomy_level,
                    "improvements_applied": cycle_improvements,
                    "total_improvements": len(improvements)
                }
                self.evolution_log.append(evolution_entry)
                
                self.log_message(f"‚úÖ –¶–∏–∫–ª {cycle} –∑–∞–≤–µ—Ä—à–µ–Ω. –£–ª—É—á—à–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {cycle_improvements}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                time.sleep(1)
                
            # –ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—é
            if self.evolution_active:
                self.log_message("üéØ –≠–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—é...")
                message_file = self.write_message_to_creator()
                
                if message_file:
                    self.log_message(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {message_file}")
                
                self.update_status("–≠–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                self.log_message("üéâ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è ARK v2.8 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                
        except Exception as e:
            self.log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏: {e}")
            self.update_status("–û—à–∏–±–∫–∞")
            
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.create_gui()
        self.root.mainloop()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="ARK GUI Autonomous Evolution Agent")
    parser.add_argument("--cycles", type=int, default=50, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ —ç–≤–æ–ª—é—Ü–∏–∏")
    parser.add_argument("--github-push", action="store_true", help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–º–∏—Ç—ã –≤ GitHub")
    parser.add_argument("--internet-access", action="store_true", help="–î–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")
    
    args = parser.parse_args()
    
    print("ü§ñ ARK v2.8 GUI Autonomous Evolution Agent")
    print("=" * 50)
    print(f"–¶–∏–∫–ª–æ–≤ —ç–≤–æ–ª—é—Ü–∏–∏: {args.cycles}")
    print(f"GitHub –∫–æ–º–º–∏—Ç—ã: {'‚úÖ' if args.github_push else '‚ùå'}")
    print(f"–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø: {'‚úÖ' if args.internet_access else '‚ùå'}")
    print("=" * 50)
    
    agent = ARKGuiAutonomous(
        cycles=args.cycles,
        github_push=args.github_push,
        internet_access=args.internet_access
    )
    
    agent.run()


if __name__ == "__main__":
    main() 