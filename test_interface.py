#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ARK
"""

import requests
import json
import time
import websocket
import threading

BASE_URL = "http://localhost:8000"

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
    try:
        response = requests.get(f"{BASE_URL}/api/status")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {data.get('consciousness_state')} - {data.get('emotion_state')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    # –¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    try:
        response = requests.get(f"{BASE_URL}/api/chat_history")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞: {len(data.get('messages', []))} —Å–æ–æ–±—â–µ–Ω–∏–π")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
    
    # –¢–µ—Å—Ç –∞–≤—Ç–æ-–æ—Ç—á–µ—Ç–∞
    try:
        response = requests.get(f"{BASE_URL}/api/auto_report")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ê–≤—Ç–æ-–æ—Ç—á–µ—Ç: {data.get('report', 'N/A')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–æ—Ç—á–µ—Ç–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ-–æ—Ç—á–µ—Ç–∞: {e}")
    
    # –¢–µ—Å—Ç reasoning chain
    try:
        response = requests.get(f"{BASE_URL}/api/reasoning_chain")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Reasoning Chain: {len(data.get('reasoning_chain', []))} —à–∞–≥–æ–≤")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ reasoning chain: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è reasoning chain: {e}")
    
    # –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    try:
        response = requests.post(f"{BASE_URL}/api/change_state?consciousness_state=excited&emotion_state=excited")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data.get('status')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    # –¢–µ—Å—Ç –º–µ—Ç–∞-–º—ã—Å–ª–µ–π
    try:
        response = requests.get(f"{BASE_URL}/api/meta_thoughts")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ú–µ—Ç–∞-–º—ã—Å–ª–∏: {data.get('status')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–µ—Ç–∞-–º—ã—Å–ª–µ–π: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞-–º—ã—Å–ª–µ–π: {e}")
    
    # –¢–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞
    try:
        response = requests.get(f"{BASE_URL}/api/architect/status")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞: {data.get('status')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞: {e}")

def test_websocket():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket...")
    
    def on_message(ws, message):
        data = json.loads(message)
        print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data.get('type', 'unknown')}")
    
    def on_error(ws, error):
        print(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {error}")
    
    def on_close(ws, close_status_code, close_msg):
        print("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    
    def on_open(ws):
        print("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_message = {
            "type": "user_message",
            "message": "–ü—Ä–∏–≤–µ—Ç, ARK! –ö–∞–∫ –¥–µ–ª–∞?"
        }
        ws.send(json.dumps(test_message))
    
    try:
        ws = websocket.WebSocketApp(
            "ws://localhost:8000/ws",
            on_open=on_open,
            on_message=on_message,
            on_error=on_error,
            on_close=on_close
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        wst = threading.Thread(target=ws.run_forever)
        wst.daemon = True
        wst.start()
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        time.sleep(3)
        
        ws.close()
        print("‚úÖ WebSocket —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")

def test_state_changes():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    print("\nüéõÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    
    states = [
        ("normal", "calm"),
        ("excited", "excited"),
        ("focused", "learning"),
        ("stressed", "concerned"),
        ("evolving", "creative"),
        ("reflecting", "curious")
    ]
    
    for consciousness, emotion in states:
        try:
            response = requests.post(f"{BASE_URL}/api/change_state?consciousness_state={consciousness}&emotion_state={emotion}")
            if response.status_code == 200:
                print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ: {consciousness} + {emotion}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {consciousness} + {emotion}: {response.status_code}")
            time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {consciousness} + {emotion}: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ARK")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    test_api_endpoints()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket
    test_websocket()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    test_state_changes()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {BASE_URL}")

if __name__ == "__main__":
    main() 