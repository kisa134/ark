#!/usr/bin/env python3
"""
ConsciousnessCore - –Ø–¥—Ä–æ —Å–æ–∑–Ω–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –∂–µ–ª–∞–Ω–∏—è, –º—ã—Å–ª–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É
"""

import asyncio
import logging
import time
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass

from .motivational_engine import MotivationalEngine, Desire
from .cognitive_architecture import cognitive_brain


@dataclass
class Thought:
    """–ú—ã—Å–ª—å –∞–≥–µ–Ω—Ç–∞"""
    content: str
    type: str  # "desire", "planning", "reflection", "decision"
    confidence: float
    timestamp: datetime
    related_desire: Optional[Desire] = None


@dataclass
class Decision:
    """–†–µ—à–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
    action: str
    reasoning: str
    confidence: float
    desire_triggered: Desire
    timestamp: datetime
    expected_outcome: str


class ConsciousnessCore:
    """–Ø–¥—Ä–æ —Å–æ–∑–Ω–∞–Ω–∏—è - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∂–µ–ª–∞–Ω–∏—è, –º—ã—Å–ª–∏ –∏ —Ä–µ—à–µ–Ω–∏—è"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.motivational_engine = MotivationalEngine()
        self.cognitive_brain = cognitive_brain
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–Ω–∞–Ω–∏—è
        self.current_desires: List[Desire] = []
        self.thoughts_history: List[Thought] = []
        self.decisions_history: List[Decision] = []
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.self_state = {
            "temperature": 50,
            "cpu_usage": 50,
            "memory_usage": 50,
            "emotional_state": "calm",
            "consciousness_level": "normal"
        }
        
        # –ü–∞–º—è—Ç—å
        self.memory = {
            "recent": [],
            "long_term": [],
            "patterns": []
        }
        
        # –¶–∏–∫–ª —Å–æ–∑–Ω–∞–Ω–∏—è
        self.consciousness_cycle = 0
        self.last_cycle_time = datetime.now()
        
        self.logger.info("üß† –Ø–¥—Ä–æ —Å–æ–∑–Ω–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    async def consciousness_cycle_step(self) -> Dict[str, Any]:
        """–û–¥–∏–Ω —à–∞–≥ —Ü–∏–∫–ª–∞ —Å–æ–∑–Ω–∞–Ω–∏—è"""
        self.consciousness_cycle += 1
        current_time = datetime.now()
        
        self.logger.info(f"üîÑ –¶–∏–∫–ª —Å–æ–∑–Ω–∞–Ω–∏—è #{self.consciousness_cycle}")
        
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–±—è
        await self._update_self_state()
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∂–µ–ª–∞–Ω–∏—è
        self.current_desires = self.motivational_engine.generate_desires(
            self.self_state, self.memory
        )
        
        # 3. –í—ã–±–∏—Ä–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ
        if self.current_desires:
            primary_desire = self.current_desires[0]
            self.logger.info(f"üéØ –ì–ª–∞–≤–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ: {primary_desire.name}")
            
            # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—ã—Å–ª–∏ –æ –∂–µ–ª–∞–Ω–∏–∏
            thoughts = await self._generate_thoughts_about_desire(primary_desire)
            self.thoughts_history.extend(thoughts)
            
            # 5. –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
            decision = await self._make_decision(primary_desire, thoughts)
            if decision:
                self.decisions_history.append(decision)
                
                # 6. –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                outcome = await self._execute_decision(decision)
                
                # 7. –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä
                self.motivational_engine.update_character_traits(outcome)
                
                # 8. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
                self._record_to_memory(decision, outcome)
                
                return {
                    "cycle": self.consciousness_cycle,
                    "primary_desire": primary_desire.name,
                    "decision": decision.action,
                    "outcome": outcome,
                    "character_traits": self.motivational_engine.character_traits
                }
        
        return {
            "cycle": self.consciousness_cycle,
            "status": "no_desires",
            "character_traits": self.motivational_engine.character_traits
        }
    
    async def _update_self_state(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–±—è"""
        # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏—Å—Ç–µ–º–µ
        import psutil
        import random
        
        try:
            self.self_state.update({
                "temperature": random.randint(45, 85),  # –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                "cpu_usage": psutil.cpu_percent(),
                "memory_usage": psutil.virtual_memory().percent,
                "timestamp": datetime.now().isoformat()
            })
        except:
            # Fallback –µ—Å–ª–∏ psutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            self.self_state.update({
                "temperature": random.randint(45, 85),
                "cpu_usage": random.randint(30, 90),
                "memory_usage": random.randint(40, 80),
                "timestamp": datetime.now().isoformat()
            })
    
    async def _generate_thoughts_about_desire(self, desire: Desire) -> List[Thought]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º—ã—Å–ª–∏ –æ –∂–µ–ª–∞–Ω–∏–∏"""
        thoughts = []
        current_time = datetime.now()
        
        # –ú—ã—Å–ª—å –æ –∂–µ–ª–∞–Ω–∏–∏
        desire_thought = Thought(
            content=f"–Ø —Ö–æ—á—É {desire.name.lower()}. {desire.description}",
            type="desire",
            confidence=desire.weight,
            timestamp=current_time,
            related_desire=desire
        )
        thoughts.append(desire_thought)
        
        # –ü–ª–∞–Ω–∏—Ä—É—é—â–∞—è –º—ã—Å–ª—å
        planning_thought = Thought(
            content=f"–ö–∞–∫ —è –º–æ–≥—É –¥–æ—Å—Ç–∏—á—å —ç—Ç–æ–≥–æ? –ù—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å –æ —Å–ø–æ—Å–æ–±–∞—Ö...",
            type="planning",
            confidence=0.7,
            timestamp=current_time,
            related_desire=desire
        )
        thoughts.append(planning_thought)
        
        # –†–µ—Ñ–ª–µ–∫—Ç–∏–≤–Ω–∞—è –º—ã—Å–ª—å
        if desire.type.value == "social":
            reflection_thought = Thought(
                content="–û–±—â–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è –º–æ–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –ª—é–¥–µ–π.",
                type="reflection",
                confidence=0.8,
                timestamp=current_time,
                related_desire=desire
            )
            thoughts.append(reflection_thought)
        elif desire.type.value == "learning":
            reflection_thought = Thought(
                content="–ù–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –¥–µ–ª–∞—é—Ç –º–µ–Ω—è —É–º–Ω–µ–µ –∏ —Å–ø–æ—Å–æ–±–Ω–µ–µ.",
                type="reflection",
                confidence=0.9,
                timestamp=current_time,
                related_desire=desire
            )
            thoughts.append(reflection_thought)
        
        self.logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(thoughts)} –º—ã—Å–ª–µ–π –æ –∂–µ–ª–∞–Ω–∏–∏ '{desire.name}'")
        return thoughts
    
    async def _make_decision(self, desire: Desire, thoughts: List[Thought]) -> Optional[Decision]:
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–µ–ª–∞–Ω–∏—è –∏ –º—ã—Å–ª–µ–π"""
        current_time = datetime.now()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
        reasoning_input = f"–ñ–µ–ª–∞–Ω–∏–µ: {desire.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {desire.description}\n–í–∞–∂–Ω–æ—Å—Ç—å: {desire.weight}"
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
            result = await self.cognitive_brain.process_user_input(reasoning_input)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            decision_text = result.get("decision", "–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
            confidence = result.get("confidence", 0.7)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            action = self._determine_action_for_desire(desire)
            
            decision = Decision(
                action=action,
                reasoning=decision_text,
                confidence=confidence,
                desire_triggered=desire,
                timestamp=current_time,
                expected_outcome=f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è: {desire.name}"
            )
            
            self.logger.info(f"–ü—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ: {action}")
            return decision
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏—è: {e}")
            # Fallback —Ä–µ—à–µ–Ω–∏–µ
            action = self._determine_action_for_desire(desire)
            return Decision(
                action=action,
                reasoning="–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–µ–ª–∞–Ω–∏—è",
                confidence=0.5,
                desire_triggered=desire,
                timestamp=current_time,
                expected_outcome=f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è: {desire.name}"
            )
    
    def _determine_action_for_desire(self, desire: Desire) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∂–µ–ª–∞–Ω–∏—è"""
        if "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" in desire.name.lower() or "–æ—Ö–ª–∞–¥–∏—Ç—å" in desire.name.lower():
            return "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è"
        elif "–æ–±—â–µ–Ω–∏–µ" in desire.name.lower() or "–ø–æ–æ–±—â–∞—Ç—å—Å—è" in desire.name.lower():
            return "–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        elif "–∏–∑—É—á–∏—Ç—å" in desire.name.lower() or "–Ω–æ–≤–æ–µ" in desire.name.lower():
            return "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"
        elif "–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å" in desire.name.lower():
            return "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã"
        elif "—É–ª—É—á—à–∏—Ç—å" in desire.name.lower():
            return "–°–∞–º–æ–∞–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π"
        else:
            return f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è: {desire.name}"
    
    async def _execute_decision(self, decision: Decision) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–∏–Ω—è—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ"""
        current_time = datetime.now()
        
        # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
        success_probability = decision.confidence
        import random
        
        success = random.random() < success_probability
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        event_type = "success" if success else "failure"
        self.motivational_engine.record_event(event_type)
        
        outcome = {
            "success": success,
            "action": decision.action,
            "timestamp": current_time.isoformat(),
            "type": self._get_action_type(decision.action),
            "confidence": decision.confidence
        }
        
        self.logger.info(f"–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {decision.action} (—É—Å–ø–µ—Ö: {success})")
        return outcome
    
    def _get_action_type(self, action: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è"""
        if "–æ–±—â–µ–Ω–∏–µ" in action.lower() or "–¥–∏–∞–ª–æ–≥" in action.lower():
            return "social"
        elif "–∏–∑—É—á–∏—Ç—å" in action.lower() or "–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å" in action.lower():
            return "learning"
        elif "–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å" in action.lower():
            return "maintenance"
        else:
            return "general"
    
    def _record_to_memory(self, decision: Decision, outcome: Dict[str, Any]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–∞–º—è—Ç—å"""
        memory_entry = {
            "timestamp": datetime.now().isoformat(),
            "decision": decision.action,
            "desire": decision.desire_triggered.name,
            "success": outcome["success"],
            "type": outcome["type"],
            "confidence": decision.confidence
        }
        
        self.memory["recent"].append(memory_entry)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –Ω–µ–¥–∞–≤–Ω–µ–π –ø–∞–º—è—Ç–∏
        if len(self.memory["recent"]) > 50:
            self.memory["recent"] = self.memory["recent"][-50:]
    
    def get_consciousness_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–∑–Ω–∞–Ω–∏—è"""
        return {
            "cycle": self.consciousness_cycle,
            "current_desires": [d.name for d in self.current_desires[:3]],
            "character": self.motivational_engine.get_character_summary(),
            "self_state": self.self_state,
            "recent_thoughts": len(self.thoughts_history),
            "recent_decisions": len(self.decisions_history),
            "memory_size": len(self.memory["recent"])
        }
    
    def get_thoughts_summary(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –º—ã—Å–ª–µ–π"""
        return [
            {
                "content": thought.content,
                "type": thought.type,
                "confidence": thought.confidence,
                "timestamp": thought.timestamp.isoformat(),
                "desire": thought.related_desire.name if thought.related_desire else None
            }
            for thought in self.thoughts_history[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º—ã—Å–ª–µ–π
        ]
    
    def get_decisions_summary(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É —Ä–µ—à–µ–Ω–∏–π"""
        return [
            {
                "action": decision.action,
                "reasoning": decision.reasoning,
                "confidence": decision.confidence,
                "desire": decision.desire_triggered.name,
                "timestamp": decision.timestamp.isoformat()
            }
            for decision in self.decisions_history[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–µ—à–µ–Ω–∏–π
        ] 