#!/usr/bin/env python3
"""
MSI MYSTIC LIGHT RGB Controller
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RGB –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π MSI –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã
"""

import usb.core
import usb.util
import logging
from typing import Dict, List, Tuple, Optional
from enum import Enum

class RGBMode(Enum):
    STATIC = "static"
    BREATHING = "breathing"
    RAINBOW = "rainbow"
    OFF = "off"

class MSIRGBController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä RGB –ø–æ–¥—Å–≤–µ—Ç–∫–∏ MSI MYSTIC LIGHT"""
    
    # MSI MYSTIC LIGHT USB ID
    VENDOR_ID = 0x0db0
    PRODUCT_ID = 0x0076
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.device = None
        self.current_color = [0, 0, 0]
        self.current_mode = RGBMode.STATIC
        self.is_connected = False
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
        self._connect()
    
    def _connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MSI RGB —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"""
        try:
            # –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            self.device = usb.core.find(idVendor=self.VENDOR_ID, idProduct=self.PRODUCT_ID)
            
            if self.device is None:
                self.logger.warning("MSI MYSTIC LIGHT —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            # –°–±—Ä–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            self.device.reset()
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.device.set_configuration()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            cfg = self.device.get_active_configuration()
            intf = cfg[(0, 0)]
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ endpoint'–æ–≤
            self.ep_out = usb.util.find_descriptor(
                intf,
                custom_match=lambda e: 
                    usb.util.endpoint_direction(e.bEndpointAddress) == usb.util.ENDPOINT_OUT
            )
            
            self.ep_in = usb.util.find_descriptor(
                intf,
                custom_match=lambda e: 
                    usb.util.endpoint_direction(e.bEndpointAddress) == usb.util.ENDPOINT_IN
            )
            
            if self.ep_out is None or self.ep_in is None:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ USB endpoints")
                return False
            
            self.is_connected = True
            self.logger.info("MSI MYSTIC LIGHT –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MSI RGB: {e}")
            return False
    
    def _send_command(self, command: bytes) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        if not self.is_connected or self.device is None:
            return False
        
        try:
            self.device.write(self.ep_out.bEndpointAddress, command)
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            return False
    
    def set_color(self, r: int, g: int, b: int, mode: RGBMode = RGBMode.STATIC) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ RGB"""
        if not self.is_connected:
            self.logger.warning("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
            return False
        
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π (0-255)
            r = max(0, min(255, r))
            g = max(0, min(255, g))
            b = max(0, min(255, b))
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è MSI MYSTIC LIGHT
            # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–∞–Ω–¥—ã - –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            command = bytes([
                0x01,  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–∞–Ω–¥—ã
                0x02,  # –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞
                r, g, b,  # RGB –∑–Ω–∞—á–µ–Ω–∏—è
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–π—Ç—ã
                0xFF   # –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π –±–∞–π—Ç
            ])
            
            success = self._send_command(command)
            if success:
                self.current_color = [r, g, b]
                self.current_mode = mode
                self.logger.info(f"–¶–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: RGB({r}, {g}, {b}) - {mode.value}")
            
            return success
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞: {e}")
            return False
    
    def set_color_by_name(self, color_name: str, mode: RGBMode = RGBMode.STATIC) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏"""
        color_map = {
            "red": [255, 0, 0],
            "green": [0, 255, 0],
            "blue": [0, 0, 255],
            "yellow": [255, 255, 0],
            "purple": [128, 0, 128],
            "cyan": [0, 255, 255],
            "orange": [255, 165, 0],
            "pink": [255, 192, 203],
            "white": [255, 255, 255],
            "off": [0, 0, 0],
            "black": [0, 0, 0]
        }
        
        if color_name.lower() in color_map:
            r, g, b = color_map[color_name.lower()]
            return self.set_color(r, g, b, mode)
        else:
            self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç: {color_name}")
            return False
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        return {
            "connected": self.is_connected,
            "device_name": "MSI MYSTIC LIGHT",
            "vendor_id": self.VENDOR_ID,
            "product_id": self.PRODUCT_ID,
            "current_color": self.current_color,
            "current_mode": self.current_mode.value,
            "device_info": {
                "manufacturer": "MSI",
                "product": "MYSTIC LIGHT",
                "serial": "7E2523022001" if self.is_connected else None
            }
        }
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"""
        if not self.is_connected:
            return False
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            manufacturer = usb.util.get_string(self.device, self.device.iManufacturer)
            product = usb.util.get_string(self.device, self.device.iProduct)
            
            self.logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫: {manufacturer} {product}")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        if self.device is not None:
            usb.util.dispose_resources(self.device)
            self.device = None
        
        self.is_connected = False
        self.logger.info("–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MSI RGB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
msi_rgb_controller = MSIRGBController()

def test_msi_rgb():
    """–¢–µ—Å—Ç MSI RGB –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
    controller = MSIRGBController()
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MSI RGB –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not controller.is_connected:
        print("‚ùå MSI RGB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    print("‚úÖ MSI RGB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if controller.test_connection():
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É")
        return False
    
    # –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–æ–≤
    test_colors = [
        ("red", [255, 0, 0]),
        ("green", [0, 255, 0]),
        ("blue", [0, 0, 255]),
        ("yellow", [255, 255, 0])
    ]
    
    for color_name, rgb in test_colors:
        print(f"üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ {color_name}...")
        if controller.set_color(*rgb):
            print(f"‚úÖ –¶–≤–µ—Ç {color_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞ {color_name}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    status = controller.get_status()
    print(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
    
    controller.disconnect()
    return True

if __name__ == "__main__":
    test_msi_rgb() 